local art = [[
───────────────────────────────────────
───▐▀▄───────▄▀▌───▄▄▄▄▄▄▄─────────────
───▌▒▒▀▄▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄──────────
──▐▒▒▒▒▀▒▀▒▀▒▒▒▒◎◎◎◎◎◎◎◎◎◎◎◎▒▀▄────────
──▌◎◎◎◎◎◎◎◎◎◎◎◎▒▄◎◎◎◎◎◎◎◎◎◎◎▀▄──────
▀█◎◎◎█▌◎◎█◎◎▐█◎◎▒▀◎◎◎◎◎◎◎◎◎◎◎▒▌─────
▀▌◎◎◎◎◎▀▒▀◎◎◎◎◎▀▀◎◎◎◎◎◎◎◎◎◎◎◎▐───▄▄
▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒▌▄█▒█
▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒█▒█▀─
▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒█▀───
▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒▌────
─▌◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒▐─────
─▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒▌─────
──▌◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▐──────
──▐▄◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▄▌──────
────▀▄▄▀▀▀▀▀▄▄▀▀▀▀▀▀▀▄▄▀▀▀▀▀▄▄▀────────
]]
print(art)
print("==============================================")
print("                 NerdWareOS                   ")
print("==============================================")

-- ==============================
-- SERVICES & GLOBALS
-- ==============================
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")

local localPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Define themeColor at the very top
local themeColor = Color3.fromRGB(80, 180, 255)

-- Global state management
_G.AdminPanelState = _G.AdminPanelState or {
    StartTime = tick(),
    GodMode = false,
    InfiniteJump = false,
    NoClip = false,
    Flying = false,
    ESPEnabled = false,
    Fullbright = false,
    WalkSpeed = 16,
    JumpPower = 50,
    Viewing = false,
    TargetPlayer = nil,
    BangMode = false,
    BangTarget = nil,
    BangAnimation = nil,
    CommandHistory = {},
    Notifications = true,
    AutoSave = true,
    Theme = "Blue",
    CamlockEnabled = false,
    CamlockKey = "Q",
    CamlockTarget = nil,
    CamlockPrediction = 0.12,
    StickyAim = false,
    AimAssist = false
}

local State = _G.AdminPanelState

-- ==============================
-- GUI SETUP
-- ==============================
local success, playerGui = pcall(function()
    return localPlayer:WaitForChild("PlayerGui", 5)
end)
if not success or not playerGui then
    warn("Failed to access PlayerGui, retrying...")
    playerGui = localPlayer:WaitForChild("PlayerGui", 10)
end

local existingGui = playerGui:FindFirstChild("NerdWareOS")
if existingGui then
    existingGui:Destroy()
    wait(0.1)
end

local ScreenGui = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local TerminalFrame = Instance.new("ScrollingFrame")
local SidePanel = Instance.new("Frame")

ScreenGui.Parent = playerGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Name = "NerdWareOS"
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true

-- Main container with improved styling
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(10, 12, 15)
MainFrame.BorderSizePixel = 0
MainFrame.Position = UDim2.new(0.5, -600, 0.5, -350) -- Centered position
MainFrame.Size = UDim2.new(0, 1200, 0, 700)
MainFrame.Active = true
MainFrame.Draggable = true

-- Add corner rounding
local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 8)
mainCorner.Parent = MainFrame

-- Add shadow effect
local mainStroke = Instance.new("UIStroke")
mainStroke.Color = themeColor
mainStroke.Thickness = 2
mainStroke.Transparency = 0.5
mainStroke.Parent = MainFrame

-- Entrance animation for MainFrame
MainFrame.Position = UDim2.new(0.5, -600, 0.5, -700) -- Start off-screen
local entranceTween = TweenService:Create(MainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
    Position = UDim2.new(0.5, -600, 0.5, -350) -- Final position
})
entranceTween:Play()

-- Terminal area (left side) - expanded
TerminalFrame.Parent = MainFrame
TerminalFrame.BackgroundColor3 = Color3.fromRGB(10, 12, 15)
TerminalFrame.BorderSizePixel = 0
TerminalFrame.Position = UDim2.new(0, 10, 0, 10)
TerminalFrame.Size = UDim2.new(0, 780, 0, 680)
TerminalFrame.ScrollBarThickness = 6
TerminalFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
TerminalFrame.ScrollBarImageColor3 = themeColor
TerminalFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

local terminalCorner = Instance.new("UICorner")
terminalCorner.CornerRadius = UDim.new(0, 6)
terminalCorner.Parent = TerminalFrame

-- Enhanced ASCII Logo
local logo = Instance.new("TextLabel")
logo.Parent = TerminalFrame
logo.BackgroundTransparency = 1
logo.Position = UDim2.new(0, 5, 0, 0)
logo.Size = UDim2.new(1, -10, 0, 220)
logo.Font = Enum.Font.Code
logo.Text = [[>>NerdWareOS.v1.0

░██╗░░░░░░░██╗███████╗██╗░░░░░░█████╗░░█████╗░███╗░░░███╗███████╗  ████████╗░█████╗░
░██║░░██╗░░██║██╔════╝██║░░░░░██╔══██╗██╔══██╗████╗░████║██╔════╝  ╚══██╔══╝██╔══██╗
░╚██╗████╗██╔╝█████╗░░██║░░░░░██║░░╚═╝██║░░██║██╔████╔██║█████╗░░  ░░░██║░░░██║░░██║
░░████╔═████║░██╔══╝░░██║░░░░░██║░░██╗██║░░██║██║╚██╔╝██║██╔══╝░░  ░░░██║░░░██║░░██║
░░╚██╔╝░╚██╔╝░███████╗███████╗╚█████╔╝╚█████╔╝██║░╚═╝░██║███████╗  ░░░██║░░░╚█████╔╝
░░░╚═╝░░░╚═╝░░╚══════╝╚══════╝░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚══════╝  ░░░╚═╝░░░░╚════╝░

███╗░░██║███████╗██████╗░██████╗░░██╗░░░░░░░██╗░█████╗░██████╗░███████╗  ░█████╗░░██████╗
████╗░██║██╔════╝██╔══██╗██╔══██╗░██║░░██╗░░██║██╔══██╗██╔══██╗██╔════╝  ██╔══██╗██╔════╝
██╔██╗██║█████╗░░██████╔╝██║░░██║░╚██╗████╗██╔╝███████║██████╔╝█████╗░░  ██║░░██║╚█████╗░
██║╚████║██╔══╝░░██╔══██╗██║░░██║░░████╔═████║░██╔══██║██╔══██╗██╔══╝░░  ██║░░██║░╚═══██╗
██║░╚███║███████╗██║░░██║██████╔╝░░╚██╔╝░╚██╔╝░██║░░██║██║░░██║███████╗  ╚█████╔╝██████╔╝
╚═╝░░╚══╝╚══════╝╚═╝░░╚═╝╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝  ░╚════╝░╚═════╝░
]]
logo.TextColor3 = themeColor
logo.TextSize = 12
logo.TextXAlignment = Enum.TextXAlignment.Left
logo.TextYAlignment = Enum.TextYAlignment.Top
logo.TextWrapped = false
logo.LayoutOrder = 1

-- Logo entrance animation
logo.TextTransparency = 1
local logoTween = TweenService:Create(logo, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
    TextTransparency = 0
})
task.delay(0.3, function()
    logoTween:Play()
end)

-- Welcome text with system info
local welcomeText = Instance.new("TextLabel")
welcomeText.Parent = TerminalFrame
welcomeText.BackgroundTransparency = 1
welcomeText.Position = UDim2.new(0, 5, 0, 220)
welcomeText.Size = UDim2.new(1, -10, 0, 40)
welcomeText.Font = Enum.Font.Code
welcomeText.Text = "Welcome to NerdWareOS Works Onn Any Game You Run On For An Advantage :)"
welcomeText.TextColor3 = themeColor
welcomeText.TextSize = 11
welcomeText.TextXAlignment = Enum.TextXAlignment.Left
welcomeText.TextYAlignment = Enum.TextYAlignment.Top
welcomeText.TextWrapped = true
welcomeText.LayoutOrder = 2

-- Welcome text entrance animation
welcomeText.TextTransparency = 1
local welcomeTween = TweenService:Create(welcomeText, TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
    TextTransparency = 0
})
task.delay(0.5, function()
    welcomeTween:Play()
end)

-- Terminal messages layout
local messagesLayout = Instance.new("UIListLayout")
messagesLayout.Parent = TerminalFrame
messagesLayout.Padding = UDim.new(0, 3)
messagesLayout.SortOrder = Enum.SortOrder.LayoutOrder

local messagesPadding = Instance.new("UIPadding")
messagesPadding.Parent = TerminalFrame
messagesPadding.PaddingTop = UDim.new(0, 270)
messagesPadding.PaddingLeft = UDim.new(0, 5)
messagesPadding.PaddingRight = UDim.new(0, 15)

-- ==============================
-- UTILITY FUNCTIONS
-- ==============================
function GetCurrentTime()
    return os.date("%H:%M:%S")
end

function GetCurrentDate()
    return os.date("%Y-%m-%d")
end

function CreateTerminalMessage(timestamp, level, message, color)
    if not TerminalFrame then return end
    local msgFrame = Instance.new("Frame")
    msgFrame.Parent = TerminalFrame
    msgFrame.BackgroundTransparency = 1
    msgFrame.Size = UDim2.new(1, -10, 0, 15)
    msgFrame.LayoutOrder = tick()
    
    local msgLabel = Instance.new("TextLabel")
    msgLabel.Parent = msgFrame
    msgLabel.BackgroundTransparency = 1
    msgLabel.Size = UDim2.new(1, 0, 1, 0)
    msgLabel.Font = Enum.Font.Code
    msgLabel.Text = "[" .. timestamp .. "] " .. level .. " " .. message
    msgLabel.TextColor3 = color
    msgLabel.TextSize = 11
    msgLabel.TextXAlignment = Enum.TextXAlignment.Left
    msgLabel.TextWrapped = true
    
    -- Message entrance animation
    msgLabel.TextTransparency = 1
    msgLabel.Position = UDim2.new(0, -20, 0, 0)
    local msgTween = TweenService:Create(msgLabel, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        TextTransparency = 0,
        Position = UDim2.new(0, 0, 0, 0)
    })
    msgTween:Play()
    
    -- Add to command history if it's a command
    if level == "[CMD]" then
        table.insert(State.CommandHistory, {
            time = timestamp,
            command = message
        })
        if #State.CommandHistory > 50 then
            table.remove(State.CommandHistory, 1)
        end
    end
    
    return msgFrame
end

function CreateMultiLineTerminalMessage(timestamp, level, messages, color)
    if not TerminalFrame then return end
    for i, message in ipairs(messages) do
        local msgFrame = Instance.new("Frame")
        msgFrame.Parent = TerminalFrame
        msgFrame.BackgroundTransparency = 1
        msgFrame.Size = UDim2.new(1, -10, 0, 15)
        msgFrame.LayoutOrder = tick() + i
        
        local msgLabel = Instance.new("TextLabel")
        msgLabel.Parent = msgFrame
        msgLabel.BackgroundTransparency = 1
        msgLabel.Size = UDim2.new(1, 0, 1, 0)
        msgLabel.Font = Enum.Font.Code
        
        if i == 1 then
            msgLabel.Text = "[" .. timestamp .. "] " .. level .. " " .. message
        else
            msgLabel.Text = message
        end
        
        msgLabel.TextColor3 = color
        msgLabel.TextSize = 11
        msgLabel.TextXAlignment = Enum.TextXAlignment.Left
        msgLabel.TextWrapped = true
        
        -- Message entrance animation with staggered delay
        msgLabel.TextTransparency = 1
        msgLabel.Position = UDim2.new(0, -20, 0, 0)
        local msgTween = TweenService:Create(msgLabel, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            TextTransparency = 0,
            Position = UDim2.new(0, 0, 0, 0)
        })
        task.delay((i-1) * 0.05, function()
            msgTween:Play()
        end)
    end
end

function ShowNotification(title, message, duration)
    if not State.Notifications then return end
    
    local notif = Instance.new("Frame")
    notif.Parent = ScreenGui
    notif.BackgroundColor3 = Color3.fromRGB(15, 18, 25)
    notif.BorderColor3 = themeColor
    notif.BorderSizePixel = 2
    notif.Position = UDim2.new(1, 320, 0, 20) -- Start off-screen
    notif.Size = UDim2.new(0, 300, 0, 80)
    notif.Rotation = 5 -- Slight rotation for effect
    
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 6)
    notifCorner.Parent = notif
    
    local notifTitle = Instance.new("TextLabel")
    notifTitle.Parent = notif
    notifTitle.BackgroundTransparency = 1
    notifTitle.Position = UDim2.new(0, 10, 0, 10)
    notifTitle.Size = UDim2.new(1, -20, 0, 20)
    notifTitle.Font = Enum.Font.Code
    notifTitle.Text = title
    notifTitle.TextColor3 = themeColor
    notifTitle.TextSize = 13
    notifTitle.TextXAlignment = Enum.TextXAlignment.Left
    
    local notifMessage = Instance.new("TextLabel")
    notifMessage.Parent = notif
    notifMessage.BackgroundTransparency = 1
    notifMessage.Position = UDim2.new(0, 10, 0, 35)
    notifMessage.Size = UDim2.new(1, -20, 1, -45)
    notifMessage.Font = Enum.Font.Code
    notifMessage.Text = message
    notifMessage.TextColor3 = Color3.fromRGB(200, 200, 200)
    notifMessage.TextSize = 11
    notifMessage.TextXAlignment = Enum.TextXAlignment.Left
    notifMessage.TextYAlignment = Enum.TextYAlignment.Top
    notifMessage.TextWrapped = true
    
    -- Slide in animation with bounce effect
    local slideIn = TweenService:Create(notif, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Position = UDim2.new(1, -320, 0, 20),
        Rotation = 0
    })
    slideIn:Play()
    
    -- Pulse effect
    local pulse = TweenService:Create(notif, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        Size = UDim2.new(0, 310, 0, 85)
    })
    task.delay(0.5, function()
        pulse:Play()
    end)
    
    -- Auto-dismiss with slide out animation
    task.delay(duration or 3, function()
        pulse:Cancel()
        local slideOut = TweenService:Create(notif, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
            Position = UDim2.new(1, 20, 0, 20),
            Rotation = -5
        })
        slideOut:Play()
        slideOut.Completed:Connect(function()
            notif:Destroy()
        end)
    end)
end

-- Enhanced startup messages
local startupMessages = {
    {time = 0, level = "[SYSTEM]", msg = "Initializing NerdWareOS v1.0...", color = Color3.fromRGB(80, 200, 100)},
    {time = 0.1, level = "[SYSTEM]", msg = "Loading core modules and dependencies...", color = Color3.fromRGB(80, 200, 100)},
    {time = 0.2, level = "[SYSTEM]", msg = "Establishing secure connection to server...", color = Color3.fromRGB(80, 200, 100)},
    {time = 0.3, level = "[SYSTEM]", msg = "Verifying user permissions and access rights...", color = Color3.fromRGB(80, 200, 100)},
    {time = 0.4, level = "[SUCCESS]", msg = "All systems operational. Welcome " .. localPlayer.Name .. "!", color = Color3.fromRGB(100, 255, 100)},
    {time = 0.5, level = "[TIP]", msg = "Use /help to view all 50+ available commands and features.", color = Color3.fromRGB(100, 180, 255)},
    {time = 0.6, level = "[TIP]", msg = "Commands support partial names: '/tp joh' finds 'JohnDoe123'.", color = Color3.fromRGB(100, 180, 255)},
    {time = 0.7, level = "[NOTICE]", msg = "Tab system includes Combat, Visuals, Movement, World, and Settings.", color = Color3.fromRGB(80, 200, 100)},
    {time = 0.8, level = "[NOTICE]", msg = "To stop spectating or actions, use /view or /bang commands.", color = Color3.fromRGB(80, 200, 100)},
    {time = 0.9, level = "[INFO]", msg = "Features: Camlock, ESP, Fly, Noclip, and more!", color = Color3.fromRGB(100, 180, 255)},
    {time = 1.0, level = "[TIP]", msg = "Check the Settings tab to customize your experience.", color = Color3.fromRGB(100, 180, 255)},
    {time = 1.1, level = "[HUMOR]", msg = "Remember: With great power comes great responsibility... or chaos.", color = Color3.fromRGB(150, 150, 255)},
    {time = 1.2, level = "[HUMOR]", msg = "If it breaks, just blame the update. Works every time.", color = Color3.fromRGB(150, 150, 255)},
}

for _, msg in ipairs(startupMessages) do
    task.delay(msg.time, function()
        CreateTerminalMessage(GetCurrentTime(), msg.level, msg.msg, msg.color)
    end)
end

-- ==============================
-- SIDE PANEL SETUP
-- ==============================
SidePanel.Parent = MainFrame
SidePanel.BackgroundColor3 = Color3.fromRGB(10, 12, 15)
SidePanel.BorderSizePixel = 0
SidePanel.Position = UDim2.new(0, 800, 0, 10)
SidePanel.Size = UDim2.new(0, 390, 0, 680)

-- Side panel entrance animation
SidePanel.Position = UDim2.new(0, 1200, 0, 10) -- Start off-screen
local sidePanelTween = TweenService:Create(SidePanel, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out, 0, false, 0.2), {
    Position = UDim2.new(0, 800, 0, 10)
})
sidePanelTween:Play()

-- Server status box (enhanced)
local statusBox = Instance.new("Frame")
statusBox.Parent = SidePanel
statusBox.BackgroundColor3 = Color3.fromRGB(15, 18, 25)
statusBox.BorderColor3 = themeColor
statusBox.BorderSizePixel = 2
statusBox.Position = UDim2.new(0, 5, 0, 5)
statusBox.Size = UDim2.new(1, -10, 0, 140)

local statusCorner = Instance.new("UICorner")
statusCorner.CornerRadius = UDim.new(0, 6)
statusCorner.Parent = statusBox

local statusTitle = Instance.new("TextLabel")
statusTitle.Parent = statusBox
statusTitle.BackgroundTransparency = 1
statusTitle.Position = UDim2.new(0, 10, 0, 8)
statusTitle.Size = UDim2.new(1, -20, 0, 20)
statusTitle.Font = Enum.Font.Code
statusTitle.Text = "⚡ SERVER STATUS"
statusTitle.TextColor3 = themeColor
statusTitle.TextSize = 14
statusTitle.TextXAlignment = Enum.TextXAlignment.Left

local statusInfo = Instance.new("TextLabel")
statusInfo.Parent = statusBox
statusInfo.BackgroundTransparency = 1
statusInfo.Position = UDim2.new(0, 10, 0, 35)
statusInfo.Size = UDim2.new(1, -20, 1, -45)
statusInfo.Font = Enum.Font.Code
statusInfo.Text = "Players: 0/0\nTime: 00:00:00\nFPS: 60\nUptime: 0s\nPing: 0ms\nMemory: 0 MB"
statusInfo.TextColor3 = Color3.fromRGB(200, 200, 200)
statusInfo.TextSize = 11
statusInfo.TextXAlignment = Enum.TextXAlignment.Left
statusInfo.TextYAlignment = Enum.TextYAlignment.Top

-- Status box entrance animation
statusBox.Position = UDim2.new(0, 5, 0, -140) -- Start above
local statusBoxTween = TweenService:Create(statusBox, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out, 0, false, 0.5), {
    Position = UDim2.new(0, 5, 0, 5)
})
statusBoxTween:Play()

-- Enhanced server status updates
task.spawn(function()
    local lastFPSUpdate = tick()
    local frameCount = 0
    local currentFPS = 60
    
    local fpsConnection = RunService.Heartbeat:Connect(function()
        frameCount = frameCount + 1
        if tick() - lastFPSUpdate >= 1 then
            currentFPS = frameCount
            frameCount = 0
            lastFPSUpdate = tick()
        end
    end)
    
    while task.wait(0.5) do
        pcall(function()
            local players = Players:GetPlayers()
            local playerCount = #players
            local maxPlayers = Players.MaxPlayers
            local currentTime = os.date("%H:%M:%S")
            local fps = currentFPS
            local uptime = math.floor(tick() - State.StartTime)
            local hours = math.floor(uptime / 3600)
            local minutes = math.floor((uptime % 3600) / 60)
            local seconds = uptime % 60
            local uptimeStr = string.format("%02d:%02d:%02d", hours, minutes, seconds)
            local ping = 0
            pcall(function()
                ping = math.floor(localPlayer:GetNetworkPing() * 1000)
            end)
            
            -- Get memory usage
            local memory = math.floor(game:GetService("Stats"):GetTotalMemoryUsageMb())
            
            statusInfo.Text = string.format(
                "Players Online: %d/%d\nServer Time: %s\nFPS: %d | Memory: %d MB\nScript Uptime: %s\nNetwork Ping: %dms\nPlace ID: %s",
                playerCount, maxPlayers, currentTime, fps, memory, uptimeStr, ping, tostring(game.PlaceId)
            )
            
            -- Pulse effect when FPS changes significantly
            if frameCount == 0 and (currentFPS < 30 or currentFPS > 100) then
                local pulse = TweenService:Create(statusInfo, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
                    TextColor3 = currentFPS < 30 and Color3.fromRGB(255, 100, 100) or Color3.fromRGB(100, 255, 100)
                })
                pulse:Play()
                pulse.Completed:Connect(function()
                    local reset = TweenService:Create(statusInfo, TweenInfo.new(0.5), {
                        TextColor3 = Color3.fromRGB(200, 200, 200)
                    })
                    reset:Play()
                end)
            end
        end)
    end
end)

-- ==============================
-- SETTINGS PANEL
-- ==============================
local settingsPanel = Instance.new("Frame")
settingsPanel.Parent = MainFrame
settingsPanel.BackgroundColor3 = Color3.fromRGB(15, 18, 25)
settingsPanel.BorderColor3 = themeColor
settingsPanel.BorderSizePixel = 2
settingsPanel.Position = UDim2.new(0, 800, 0, 10)
settingsPanel.Size = UDim2.new(0, 390, 0, 680)
settingsPanel.Visible = false

local settingsCorner = Instance.new("UICorner")
settingsCorner.CornerRadius = UDim.new(0, 6)
settingsCorner.Parent = settingsPanel

local settingsPanelTitle = Instance.new("TextLabel")
settingsPanelTitle.Parent = settingsPanel
settingsPanelTitle.BackgroundTransparency = 1
settingsPanelTitle.Position = UDim2.new(0, 10, 0, 8)
settingsPanelTitle.Size = UDim2.new(1, -40, 0, 25)
settingsPanelTitle.Font = Enum.Font.Code
settingsPanelTitle.Text = "⚙ SETTINGS"
settingsPanelTitle.TextColor3 = themeColor
settingsPanelTitle.TextSize = 14
settingsPanelTitle.TextXAlignment = Enum.TextXAlignment.Left

local closeSettingsBtn = Instance.new("TextButton")
closeSettingsBtn.Parent = settingsPanel
closeSettingsBtn.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
closeSettingsBtn.BorderSizePixel = 0
closeSettingsBtn.Position = UDim2.new(1, -30, 0, 5)
closeSettingsBtn.Size = UDim2.new(0, 25, 0, 25)
closeSettingsBtn.Font = Enum.Font.Code
closeSettingsBtn.Text = "X"
closeSettingsBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
closeSettingsBtn.TextSize = 14

local closeBtnCorner = Instance.new("UICorner")
closeBtnCorner.CornerRadius = UDim.new(0, 4)
closeBtnCorner.Parent = closeSettingsBtn

-- Close button animations
closeSettingsBtn.MouseEnter:Connect(function()
    TweenService:Create(closeSettingsBtn, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(220, 70, 70),
        Size = UDim2.new(0, 28, 0, 28)
    }):Play()
end)

closeSettingsBtn.MouseLeave:Connect(function()
    TweenService:Create(closeSettingsBtn, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(180, 50, 50),
        Size = UDim2.new(0, 25, 0, 25)
    }):Play()
end)

closeSettingsBtn.MouseButton1Click:Connect(function()
    settingsPanel.Visible = false
    CreateTerminalMessage(GetCurrentTime(), "[SETTINGS]", "Settings panel closed", Color3.fromRGB(150, 150, 255))
end)

local settingsContent = Instance.new("ScrollingFrame")
settingsContent.Parent = settingsPanel
settingsContent.BackgroundColor3 = Color3.fromRGB(10, 12, 15)
settingsContent.BorderColor3 = themeColor:Lerp(Color3.fromRGB(40, 90, 140), 0.5)
settingsContent.BorderSizePixel = 1
settingsContent.Position = UDim2.new(0, 10, 0, 40)
settingsContent.Size = UDim2.new(1, -20, 1, -50)
settingsContent.ScrollBarThickness = 6
settingsContent.ScrollBarImageColor3 = themeColor
settingsContent.CanvasSize = UDim2.new(0, 0, 0, 0)
settingsContent.AutomaticCanvasSize = Enum.AutomaticSize.Y

local settingsContentCorner = Instance.new("UICorner")
settingsContentCorner.CornerRadius = UDim.new(0, 4)
settingsContentCorner.Parent = settingsContent

local settingsLayout = Instance.new("UIListLayout")
settingsLayout.Parent = settingsContent
settingsLayout.Padding = UDim.new(0, 8)
settingsLayout.SortOrder = Enum.SortOrder.LayoutOrder

local settingsPadding = Instance.new("UIPadding")
settingsPadding.Parent = settingsContent
settingsPadding.PaddingTop = UDim.new(0, 5)
settingsPadding.PaddingLeft = UDim.new(0, 5)
settingsPadding.PaddingRight = UDim.new(0, 5)
settingsPadding.PaddingBottom = UDim.new(0, 5)

local function ClearSettingsPanel()
    for _, child in ipairs(settingsContent:GetChildren()) do
        if child:IsA("Frame") or child:IsA("TextLabel") then
            child:Destroy()
        end
    end
end

local function CreateSettingsSlider(labelText, minValue, maxValue, defaultValue, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Parent = settingsContent
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Size = UDim2.new(1, -10, 0, 60)
    sliderFrame.LayoutOrder = tick()
    
    local label = Instance.new("TextLabel")
    label.Parent = sliderFrame
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Size = UDim2.new(1, -60, 0, 20)
    label.Font = Enum.Font.Code
    label.Text = labelText
    label.TextColor3 = Color3.fromRGB(200, 200, 200)
    label.TextSize = 12
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    local sliderBg = Instance.new("Frame")
    sliderBg.Parent = sliderFrame
    sliderBg.BackgroundColor3 = Color3.fromRGB(25, 30, 40)
    sliderBg.BorderColor3 = themeColor
    sliderBg.BorderSizePixel = 1
    sliderBg.Position = UDim2.new(0, 0, 0, 30)
    sliderBg.Size = UDim2.new(1, -10, 0, 20)
    
    local sliderBgCorner = Instance.new("UICorner")
    sliderBgCorner.CornerRadius = UDim.new(0, 4)
    sliderBgCorner.Parent = sliderBg
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Parent = sliderBg
    sliderFill.BackgroundColor3 = themeColor
    sliderFill.BorderSizePixel = 0
    sliderFill.Size = UDim2.new((defaultValue - minValue) / (maxValue - minValue), 0, 1, 0)
    
    local sliderFillCorner = Instance.new("UICorner")
    sliderFillCorner.CornerRadius = UDim.new(0, 4)
    sliderFillCorner.Parent = sliderFill
    
    local sliderBtn = Instance.new("TextButton")
    sliderBtn.Parent = sliderBg
    sliderBtn.BackgroundColor3 = themeColor:Lerp(Color3.fromRGB(255, 255, 255), 0.2)
    sliderBtn.BorderSizePixel = 0
    sliderBtn.Size = UDim2.new(0, 18, 0, 18)
    sliderBtn.Position = UDim2.new((defaultValue - minValue) / (maxValue - minValue), -9, 0.5, -9)
    sliderBtn.Text = ""
    
    local sliderBtnCorner = Instance.new("UICorner")
    sliderBtnCorner.CornerRadius = UDim.new(1, 0)
    sliderBtnCorner.Parent = sliderBtn
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Parent = sliderFrame
    valueLabel.BackgroundTransparency = 1
    valueLabel.Position = UDim2.new(1, -55, 0, 0)
    valueLabel.Size = UDim2.new(0, 55, 0, 20)
    valueLabel.Font = Enum.Font.Code
    valueLabel.Text = tostring(defaultValue)
    valueLabel.TextColor3 = themeColor
    valueLabel.TextSize = 12
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    
    local dragging = false
    
    sliderBtn.MouseButton1Down:Connect(function()
        dragging = true
        TweenService:Create(sliderBtn, TweenInfo.new(0.1), {
            Size = UDim2.new(0, 22, 0, 22)
        }):Play()
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            TweenService:Create(sliderBtn, TweenInfo.new(0.1), {
                Size = UDim2.new(0, 18, 0, 18)
            }):Play()
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = input.Position.X
            local sliderPos = sliderBg.AbsolutePosition.X
            local sliderWidth = sliderBg.AbsoluteSize.X
            local relativePos = math.clamp((mousePos - sliderPos) / sliderWidth, 0, 1)
            local value = minValue + (maxValue - minValue) * relativePos
            
            if maxValue - minValue > 10 then
                value = math.round(value)
            else
                value = math.round(value * 100) / 100
            end
            
            sliderBtn.Position = UDim2.new(relativePos, -9, 0.5, -9)
            sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
            valueLabel.Text = tostring(value)
            
            if callback then
                pcall(function()
                    callback(value)
                end)
            end
        end
    end)
    
    return sliderFrame
end

local function CreateSettingsToggle(labelText, defaultValue, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Parent = settingsContent
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.Size = UDim2.new(1, -10, 0, 35)
    toggleFrame.LayoutOrder = tick()
    
    local label = Instance.new("TextLabel")
    label.Parent = toggleFrame
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Size = UDim2.new(1, -60, 1, 0)
    label.Font = Enum.Font.Code
    label.Text = labelText
    label.TextColor3 = Color3.fromRGB(200, 200, 200)
    label.TextSize = 12
    label.TextXAlignment = Enum.TextXAlignment.Left
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Parent = toggleFrame
    toggleBtn.BackgroundColor3 = defaultValue and themeColor or Color3.fromRGB(60, 60, 60)
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Position = UDim2.new(1, -50, 0.5, -12)
    toggleBtn.Size = UDim2.new(0, 50, 0, 24)
    toggleBtn.Text = ""
    toggleBtn.AutoButtonColor = false
    
    local toggleBtnCorner = Instance.new("UICorner")
    toggleBtnCorner.CornerRadius = UDim.new(1, 0)
    toggleBtnCorner.Parent = toggleBtn
    
    local toggleIndicator = Instance.new("Frame")
    toggleIndicator.Parent = toggleBtn
    toggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleIndicator.BorderSizePixel = 0
    toggleIndicator.Position = defaultValue and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
    toggleIndicator.Size = UDim2.new(0, 20, 0, 20)
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(1, 0)
    indicatorCorner.Parent = toggleIndicator
    
    local isToggled = defaultValue
    
    toggleBtn.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        
        local newBgColor = isToggled and themeColor or Color3.fromRGB(60, 60, 60)
        local newPos = isToggled and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
        
        TweenService:Create(toggleBtn, TweenInfo.new(0.2), {BackgroundColor3 = newBgColor}):Play()
        TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {Position = newPos}):Play()
        
        if callback then
            pcall(function()
                callback(isToggled)
            end)
        end
    end)
    
    return toggleFrame
end

local function CreateSettingsDropdown(labelText, options, defaultOption, callback)
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Parent = settingsContent
    dropdownFrame.BackgroundTransparency = 1
    dropdownFrame.Size = UDim2.new(1, -10, 0, 60)
    dropdownFrame.LayoutOrder = tick()
    dropdownFrame.ZIndex = 100
    
    local label = Instance.new("TextLabel")
    label.Parent = dropdownFrame
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Size = UDim2.new(1, -10, 0, 20)
    label.Font = Enum.Font.Code
    label.Text = labelText
    label.TextColor3 = Color3.fromRGB(200, 200, 200)
    label.TextSize = 12
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 100
    
    local dropdownBtn = Instance.new("TextButton")
    dropdownBtn.Parent = dropdownFrame
    dropdownBtn.BackgroundColor3 = Color3.fromRGB(25, 30, 40)
    dropdownBtn.BorderColor3 = themeColor
    dropdownBtn.BorderSizePixel = 1
    dropdownBtn.Position = UDim2.new(0, 0, 0, 30)
    dropdownBtn.Size = UDim2.new(1, -10, 0, 30)
    dropdownBtn.Font = Enum.Font.Code
    dropdownBtn.Text = defaultOption .. " ▼"
    dropdownBtn.TextColor3 = Color3.fromRGB(200, 200, 200)
    dropdownBtn.TextSize = 11
    dropdownBtn.AutoButtonColor = false
    dropdownBtn.ZIndex = 100
    
    local dropdownBtnCorner = Instance.new("UICorner")
    dropdownBtnCorner.CornerRadius = UDim.new(0, 4)
    dropdownBtnCorner.Parent = dropdownBtn
    
    local dropdownMenu = Instance.new("Frame")
    dropdownMenu.Parent = ScreenGui
    dropdownMenu.BackgroundColor3 = Color3.fromRGB(15, 18, 25)
    dropdownMenu.BorderColor3 = themeColor
    dropdownMenu.BorderSizePixel = 1
    dropdownMenu.Size = UDim2.new(0, dropdownBtn.AbsoluteSize.X, 0, #options * 30)
    dropdownMenu.Visible = false
    dropdownMenu.ZIndex = 200
    
    local dropdownMenuCorner = Instance.new("UICorner")
    dropdownMenuCorner.CornerRadius = UDim.new(0, 4)
    dropdownMenuCorner.Parent = dropdownMenu
    
    local menuLayout = Instance.new("UIListLayout")
    menuLayout.Parent = dropdownMenu
    menuLayout.SortOrder = Enum.SortOrder.LayoutOrder
    
    for i, option in ipairs(options) do
        local optionBtn = Instance.new("TextButton")
        optionBtn.Parent = dropdownMenu
        optionBtn.BackgroundColor3 = Color3.fromRGB(25, 30, 40)
        optionBtn.BorderSizePixel = 0
        optionBtn.Size = UDim2.new(1, 0, 0, 30)
        optionBtn.Font = Enum.Font.Code
        optionBtn.Text = option
        optionBtn.TextColor3 = Color3.fromRGB(200, 200, 200)
        optionBtn.TextSize = 11
        optionBtn.LayoutOrder = i
        optionBtn.AutoButtonColor = false
        optionBtn.ZIndex = 200
        
        optionBtn.MouseEnter:Connect(function()
            TweenService:Create(optionBtn, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(35, 45, 55)
            }):Play()
        end)
        
        optionBtn.MouseLeave:Connect(function()
            TweenService:Create(optionBtn, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(25, 30, 40)
            }):Play()
        end)
        
        optionBtn.MouseButton1Click:Connect(function()
            dropdownBtn.Text = option .. " ▼"
            dropdownMenu.Visible = false
            if callback then
                pcall(function()
                    callback(option)
                end)
            end
            CreateTerminalMessage(GetCurrentTime(), "[SETTINGS]", "Selected " .. option, Color3.fromRGB(150, 150, 255))
        end)
    end
    
    dropdownBtn.MouseButton1Click:Connect(function()
        dropdownMenu.Visible = not dropdownMenu.Visible
        if dropdownMenu.Visible then
            local btnPos = dropdownBtn.AbsolutePosition
            dropdownMenu.Position = UDim2.new(0, btnPos.X, 0, btnPos.Y + dropdownBtn.AbsoluteSize.Y + 2)
            
            -- Animate dropdown menu appearance
            dropdownMenu.Size = UDim2.new(0, dropdownBtn.AbsoluteSize.X, 0, 0)
            local expandTween = TweenService:Create(dropdownMenu, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
                Size = UDim2.new(0, dropdownBtn.AbsoluteSize.X, 0, #options * 30)
            })
            expandTween:Play()
        end
    end)
    
    return dropdownFrame
end

-- ==============================
-- TAB SYSTEM
-- ==============================
local tabContainer = Instance.new("Frame")
tabContainer.Parent = SidePanel
tabContainer.BackgroundColor3 = Color3.fromRGB(15, 18, 25)
tabContainer.BorderColor3 = themeColor
tabContainer.BorderSizePixel = 2
tabContainer.Position = UDim2.new(0, 5, 0, 155)
tabContainer.Size = UDim2.new(1, -10, 0, 270)

local tabContainerCorner = Instance.new("UICorner")
tabContainerCorner.CornerRadius = UDim.new(0, 6)
tabContainerCorner.Parent = tabContainer

local tabTitle = Instance.new("TextLabel")
tabTitle.Parent = tabContainer
tabTitle.BackgroundTransparency = 1
tabTitle.Position = UDim2.new(0, 10, 0, 8)
tabTitle.Size = UDim2.new(1, -20, 0, 20)
tabTitle.Font = Enum.Font.Code
tabTitle.Text = "⚡ QUICK ACTIONS"
tabTitle.TextColor3 = themeColor
tabTitle.TextSize = 14
tabTitle.TextXAlignment = Enum.TextXAlignment.Left

local tabButtonsContainer = Instance.new("Frame")
tabButtonsContainer.Parent = tabContainer
tabButtonsContainer.BackgroundTransparency = 1
tabButtonsContainer.Position = UDim2.new(0, 5, 0, 35)
tabButtonsContainer.Size = UDim2.new(1, -10, 0, 30)

local tabContentArea = Instance.new("Frame")
tabContentArea.Parent = tabContainer
tabContentArea.BackgroundColor3 = Color3.fromRGB(10, 12, 15)
tabContentArea.BorderColor3 = themeColor:Lerp(Color3.fromRGB(40, 90, 140), 0.5)
tabContentArea.BorderSizePixel = 1
tabContentArea.Position = UDim2.new(0, 5, 0, 70)
tabContentArea.Size = UDim2.new(1, -10, 1, -100)

local tabContentCorner = Instance.new("UICorner")
tabContentCorner.CornerRadius = UDim.new(0, 4)
tabContentCorner.Parent = tabContentArea

local tabs = {}
local currentTab = nil

local function CreateTabHeaderButton(name, xPos, width)
    local btn = Instance.new("TextButton")
    btn.Parent = tabButtonsContainer
    btn.BackgroundColor3 = Color3.fromRGB(20, 25, 35)
    btn.BorderColor3 = themeColor
    btn.BorderSizePixel = 1
    btn.Position = UDim2.new(0, xPos, 0, 0)
    btn.Size = UDim2.new(0, width, 1, 0)
    btn.Font = Enum.Font.Code
    btn.Text = name
    btn.TextColor3 = themeColor
    btn.TextSize = 10
    btn.AutoButtonColor = false
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 4)
    btnCorner.Parent = btn
    
    -- Tab button animations
    btn.MouseEnter:Connect(function()
        if currentTab ~= name then
            TweenService:Create(btn, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(30, 35, 45)
            }):Play()
        end
    end)
    
    btn.MouseLeave:Connect(function()
        if currentTab ~= name then
            TweenService:Create(btn, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(20, 25, 35)
            }):Play()
        end
    end)
    
    return btn
end

local function CreateTabContent(name)
    local content = Instance.new("ScrollingFrame")
    content.Parent = tabContentArea
    content.BackgroundTransparency = 1
    content.BorderSizePixel = 0
    content.Position = UDim2.new(0, 0, 0, 0)
    content.Size = UDim2.new(1, 0, 1, 0)
    content.ScrollBarThickness = 6
    content.ScrollBarImageColor3 = themeColor
    content.CanvasSize = UDim2.new(0, 0, 0, 0)
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.Visible = false
    
    local layout = Instance.new("UIListLayout")
    layout.Parent = content
    layout.Padding = UDim.new(0, 5)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    
    local padding = Instance.new("UIPadding")
    padding.Parent = content
    padding.PaddingTop = UDim.new(0, 5)
    padding.PaddingLeft = UDim.new(0, 5)
    padding.PaddingRight = UDim.new(0, 10)
    padding.PaddingBottom = UDim.new(0, 5)
    
    return content
end

local function SwitchTab(tabName)
    if currentTab == tabName then
        return
    end
    
    for name, data in pairs(tabs) do
        data.content.Visible = false
        TweenService:Create(data.button, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(20, 25, 35),
            BorderColor3 = themeColor
        }):Play()
    end
    
    if tabs[tabName] then
        tabs[tabName].content.Visible = true
        TweenService:Create(tabs[tabName].button, TweenInfo.new(0.2), {
            BackgroundColor3 = themeColor:Lerp(Color3.fromRGB(20, 25, 35), 0.3),
            BorderColor3 = themeColor
        }):Play()
        currentTab = tabName
        CreateTerminalMessage(GetCurrentTime(), "[TAB]", "Switched to " .. tabName .. " tab", Color3.fromRGB(100, 180, 255))
    end
end

local function CreateActionButton(parent, text, callback, hasSettings)
    local btn = Instance.new("TextButton")
    btn.Parent = parent
    btn.BackgroundColor3 = Color3.fromRGB(25, 30, 40)
    btn.BorderColor3 = themeColor
    btn.BorderSizePixel = 1
    btn.Size = UDim2.new(1, -10, 0, 32)
    btn.Font = Enum.Font.Code
    btn.Text = text .. (hasSettings and " ⚙" or "")
    btn.TextColor3 = Color3.fromRGB(200, 200, 200)
    btn.TextSize = 11
    btn.AutoButtonColor = false
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 4)
    btnCorner.Parent = btn
    
    -- Button entrance animation
    btn.Position = UDim2.new(0, -10, 0, 0)
    local entranceTween = TweenService:Create(btn, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Position = UDim2.new(0, 0, 0, 0)
    })
    entranceTween:Play()
    
    -- Button hover and click animations
    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(35, 45, 55),
            BorderColor3 = themeColor:Lerp(Color3.fromRGB(150, 150, 150), 0.3),
            Size = UDim2.new(1, -5, 0, 34)
        }):Play()
    end)
    
    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(25, 30, 40),
            BorderColor3 = themeColor,
            Size = UDim2.new(1, -10, 0, 32)
        }):Play()
    end)
    
    if callback then
        btn.MouseButton1Click:Connect(function()
            -- Click animation
            local clickTween = TweenService:Create(btn, TweenInfo.new(0.1), {
                Size = UDim2.new(1, -15, 0, 28)
            })
            clickTween:Play()
            clickTween.Completed:Connect(function()
                local restoreTween = TweenService:Create(btn, TweenInfo.new(0.1), {
                    Size = UDim2.new(1, -10, 0, 32)
                })
                restoreTween:Play()
            end)
            
            pcall(callback)
        end)
    end
    
    return btn
end

-- Create tabs with proper spacing
local tabNames = {"Combat", "Visual", "Move", "World", "Config"}
local tabWidth = 72
local xPosition = 0

for _, tabName in ipairs(tabNames) do
    local button = CreateTabHeaderButton(tabName, xPosition, tabWidth)
    local content = CreateTabContent(tabName)
    
    tabs[tabName] = {
        button = button,
        content = content
    }
    
    button.MouseButton1Click:Connect(function()
        SwitchTab(tabName)
    end)
    
    xPosition = xPosition + tabWidth + 3
end

-- ==============================
-- COMBAT TAB FEATURES (UI ONLY)
-- ==============================
CreateActionButton(tabs["Combat"].content, "🎯 Aimbot", function()
    ClearSettingsPanel()
    settingsPanel.Visible = true
    settingsPanelTitle.Text = "⚙ Aimbot SETTINGS"
    
    -- State for camlock
    State.CamlockEnabled = State.CamlockEnabled or false
    State.CamlockKey = State.CamlockKey or "Q"
    State.CamlockTarget = State.CamlockTarget or nil
    State.CamlockPrediction = State.CamlockPrediction or 0.12
    State.StickyAim = State.StickyAim or false
    State.AimAssist = State.AimAssist or false
    
    -- Aimbot Toggle (first option)
    CreateSettingsToggle("Aimbot", State.CamlockEnabled, function(enabled)
        State.CamlockEnabled = enabled
        CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Aimbot " .. (enabled and "ENABLED" or "DISABLED") .. " (UI only)", Color3.fromRGB(255, 150, 100))
        if enabled then
            ShowNotification("Aimbot", "Press " .. State.CamlockKey .. " to lock onto targets", 3)
        else
            State.CamlockTarget = nil
        end
    end)
    
    -- Aimbot Key
    local keybindFrame = Instance.new("Frame")
    keybindFrame.Parent = settingsContent
    keybindFrame.BackgroundTransparency = 1
    keybindFrame.Size = UDim2.new(1, -10, 0, 60)
    keybindFrame.LayoutOrder = tick()
    
    local keybindLabel = Instance.new("TextLabel")
    keybindLabel.Parent = keybindFrame
    keybindLabel.BackgroundTransparency = 1
    keybindLabel.Position = UDim2.new(0, 0, 0, 0)
    keybindLabel.Size = UDim2.new(1, -70, 0, 20)
    keybindLabel.Font = Enum.Font.Code
    keybindLabel.Text = "Aimbot Key"
    keybindLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    keybindLabel.TextSize = 12
    keybindLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    local keybindInput = Instance.new("TextBox")
    keybindInput.Parent = keybindFrame
    keybindInput.BackgroundColor3 = Color3.fromRGB(25, 30, 40)
    keybindInput.BorderColor3 = themeColor
    keybindInput.BorderSizePixel = 1
    keybindInput.Position = UDim2.new(0, 0, 0, 30)
    keybindInput.Size = UDim2.new(0, 60, 0, 30)
    keybindInput.Font = Enum.Font.Code
    keybindInput.Text = State.CamlockKey
    keybindInput.TextColor3 = Color3.fromRGB(200, 200, 200)
    keybindInput.TextSize = 11
    keybindInput.PlaceholderText = "N/A"
    
    local keybindCorner = Instance.new("UICorner")
    keybindCorner.CornerRadius = UDim.new(0, 4)
    keybindCorner.Parent = keybindInput
    
    keybindInput.FocusLost:Connect(function()
        if keybindInput.Text ~= "" then
            State.CamlockKey = keybindInput.Text:upper():sub(1, 1)
            keybindInput.Text = State.CamlockKey
            CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Aimbot key set to: " .. State.CamlockKey, Color3.fromRGB(255, 150, 100))
        end
    end)
    
 -- Method Dropdown
CreateSettingsDropdown("Method", {"CamLock", "MouseMove"}, "CamLock", function(option)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Aim method set to: " .. option, Color3.fromRGB(255, 150, 100))
end)

-- Sort Type Dropdown
CreateSettingsDropdown("Sort Type", {"Near Crosshair", "Nearest", "Distance"}, "Near Crosshair", function(option)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Target sorting set to: " .. option, Color3.fromRGB(255, 150, 100))
end)

-- Select Part Dropdown
CreateSettingsDropdown("Select Part", {"Head", "Torso", "HumanoidRootPart", "Left Arm", "Right Arm", "Left Leg", "Right Leg"}, "Head", function(option)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Targeting body part: " .. option, Color3.fromRGB(255, 150, 100))
end)

-- Smooth Slider
CreateSettingsSlider("Smooth", 0.010, 1.000, 0.100, function(value)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Aim smoothing set to: " .. string.format("%.3f", value), Color3.fromRGB(255, 150, 100))
end)

-- ToggleCamLock Toggle
CreateSettingsToggle("Toggle CamLock", false, function(enabled)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Toggle Aimbot: " .. (enabled and "Enabled" or "Disabled"), Color3.fromRGB(255, 150, 100))
end)

-- Prediction Toggle
CreateSettingsToggle("Predict", false, function(enabled)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Movement prediction: " .. (enabled and "Enabled" or "Disabled"), Color3.fromRGB(255, 150, 100))
end)

-- ResolveCam Toggle
CreateSettingsToggle("ResolveCam", false, function(enabled)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Anti-lock bypass (Resolve Aimbot): " .. (enabled and "Enabled" or "Disabled"), Color3.fromRGB(255, 150, 100))
end)

-- Predict X Slider
CreateSettingsSlider("Predict X", -1, 1, 0, function(value)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Prediction offset (X): " .. string.format("%.3f", value), Color3.fromRGB(255, 150, 100))
end)

-- Predict Y Slider
CreateSettingsSlider("Predict Y", -1, 1, 0, function(value)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Prediction offset (Y): " .. string.format("%.3f", value), Color3.fromRGB(255, 150, 100))
end)

-- Shake Toggle
CreateSettingsToggle("Shake", false, function(enabled)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Aim shake effect: " .. (enabled and "Enabled" or "Disabled"), Color3.fromRGB(255, 150, 100))
end)

-- Sticky Toggle
CreateSettingsToggle("Sticky", false, function(enabled)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Sticky aim: " .. (enabled and "Enabled" or "Disabled"), Color3.fromRGB(255, 150, 100))
end)

-- FOV Toggle
CreateSettingsToggle("CamLock FOV", false, function(enabled)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "FOV-based Aimbot: " .. (enabled and "Enabled" or "Disabled"), Color3.fromRGB(255, 150, 100))
end)

-- FOV Value Slider
CreateSettingsSlider("FOV Value", 0, 500, 300, function(value)
    CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "FOV radius set to: " .. value .. " studs", Color3.fromRGB(255, 150, 100))
end)
    
end, true)

CreateActionButton(tabs["Combat"].content, "🎯 Hitbox Expander", function()
    ClearSettingsPanel()
    settingsPanel.Visible = true
    settingsPanelTitle.Text = "⚙ HITBOX EXPANDER"
    
    CreateSettingsSlider("Hitbox Size", 1, 20, 5, function(value)
        CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Hitbox size set to " .. value .. " (UI only)", Color3.fromRGB(255, 150, 100))
    end)
    
    CreateSettingsToggle("Show Hitboxes", false, function(enabled)
        CreateTerminalMessage(GetCurrentTime(), "[COMBAT]", "Show Hitboxes " .. (enabled and "ON" or "OFF") .. " (UI only)", Color3.fromRGB(255, 150, 100))
    end)
end, true)

-- ==============================
-- VISUAL TAB FEATURES (UI ONLY)
-- ==============================
CreateActionButton(tabs["Visual"].content, "👁 Player ESP", function()
    ClearSettingsPanel()
    settingsPanel.Visible = true
    settingsPanelTitle.Text = "⚙ ESP SETTINGS"
    
    CreateSettingsToggle("Enable ESP", State.ESPEnabled, function(enabled)
        State.ESPEnabled = enabled
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "ESP " .. (enabled and "ENABLED" or "DISABLED") .. " (UI only)", Color3.fromRGB(100, 255, 100))
    end)
    
    CreateSettingsDropdown("ESP Mode", {"Off", "Name", "Box", "Full", "Skeleton"}, "Full", function(option)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "ESP mode: " .. option .. " (UI only)", Color3.fromRGB(100, 255, 100))
    end)
    
    CreateSettingsSlider("ESP Distance", 100, 5000, 2000, function(value)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "ESP distance: " .. value .. " studs (UI only)", Color3.fromRGB(100, 255, 100))
    end)
    
    CreateSettingsToggle("Show Health", true, function(enabled)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Health display " .. (enabled and "ON" or "OFF") .. " (UI only)", Color3.fromRGB(100, 255, 100))
    end)
    
    CreateSettingsToggle("Show Distance", true, function(enabled)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Distance display " .. (enabled and "ON" or "OFF") .. " (UI only)", Color3.fromRGB(100, 255, 100))
    end)
end, true)

CreateActionButton(tabs["Visual"].content, "📍 Tracers", function()
    ClearSettingsPanel()
    settingsPanel.Visible = true
    settingsPanelTitle.Text = "⚙ TRACER SETTINGS"
    
    CreateSettingsDropdown("Tracer Origin", {"Off", "Bottom", "Center", "Mouse"}, "Bottom", function(option)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Tracer origin: " .. option .. " (UI only)", Color3.fromRGB(100, 255, 100))
    end)
    
    CreateSettingsSlider("Tracer Thickness", 1, 5, 2, function(value)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Tracer thickness: " .. value .. " (UI only)", Color3.fromRGB(100, 255, 100))
    end)
    
    CreateSettingsToggle("Rainbow Tracers", false, function(enabled)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Rainbow tracers " .. (enabled and "ON" or "OFF") .. " (UI only)", Color3.fromRGB(100, 255, 100))
    end)
end, true)

CreateActionButton(tabs["Visual"].content, "💡 Fullbright", function()
    State.Fullbright = not State.Fullbright
    CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Fullbright " .. (State.Fullbright and "ENABLED" or "DISABLED") .. " (UI only)", Color3.fromRGB(255, 255, 100))
    ShowNotification("Fullbright", "Maximum visibility enabled! (UI only)", 2)
end)

CreateActionButton(tabs["Visual"].content, "🌫 No Fog", function()
    CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Fog removed (UI only)", Color3.fromRGB(255, 255, 100))
    ShowNotification("No Fog", "Crystal clear vision! (UI only)", 2)
end)

CreateActionButton(tabs["Visual"].content, "🎨 Chams", function()
    ClearSettingsPanel()
    settingsPanel.Visible = true
    settingsPanelTitle.Text = "⚙ CHAMS SETTINGS"
    
    CreateSettingsToggle("Enable Chams", false, function(enabled)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Chams " .. (enabled and "ON" or "OFF") .. " (UI only)", Color3.fromRGB(100, 255, 100))
    end)
    
    CreateSettingsDropdown("Cham Color", {"Red", "Green", "Blue", "Rainbow"}, "Red", function(option)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Cham color: " .. option .. " (UI only)", Color3.fromRGB(100, 255, 100))
    end)
    
    CreateSettingsSlider("Transparency", 0, 100, 50, function(value)
        CreateTerminalMessage(GetCurrentTime(), "[VISUAL]", "Cham transparency: " .. value .. "% (UI only)", Color3.fromRGB(100, 255, 100))
    end)
end, true)

-- ==============================
-- MOVEMENT TAB FEATURES (UI ONLY)
-- ==============================
CreateActionButton(tabs["Move"].content, "🏃 Walk Speed", function()
    ClearSettingsPanel()
    settingsPanel.Visible = true
    settingsPanelTitle.Text = "⚙ WALK SPEED"
    
    CreateSettingsSlider("Speed", 16, 500, State.WalkSpeed, function(value)
        State.WalkSpeed = value
        CreateTerminalMessage(GetCurrentTime(), "[MOVE]", "Walk speed: " .. value .. " (UI only)", Color3.fromRGB(255, 255, 100))
    end)
    
    CreateSettingsToggle("Auto-Apply on Respawn", true, function(enabled)
        CreateTerminalMessage(GetCurrentTime(), "[MOVE]", "Auto-apply " .. (enabled and "ON" or "OFF") .. " (UI only)", Color3.fromRGB(255, 255, 100))
    end)
end, true)

CreateActionButton(tabs["Move"].content, "🦘 Jump Power", function()
    ClearSettingsPanel()
    settingsPanel.Visible = true
    settingsPanelTitle.Text = "⚙ JUMP POWER"
    
    CreateSettingsSlider("Power", 50, 500, State.JumpPower, function(value)
        State.JumpPower = value
        CreateTerminalMessage(GetCurrentTime(), "[MOVE]", "Jump power: " .. value .. " (UI only)", Color3.fromRGB(255, 255, 100))
    end)
    
    CreateSettingsToggle("Infinite Jump", State.InfiniteJump, function(enabled)
        State.InfiniteJump = enabled
        CreateTerminalMessage(GetCurrentTime(), "[MOVE]", "Infinite Jump " .. (enabled and "ON" or "OFF") .. " (UI only)", Color3.fromRGB(255, 255, 100))
    end)
end, true)

CreateActionButton(tabs["Move"].content, "✈️ Fly", function()
    State.Flying = not State.Flying
    CreateTerminalMessage(GetCurrentTime(), "[MOVE]", "Fly " .. (State.Flying and "ENABLED" or "DISABLED") .. " (UI only)", Color3.fromRGB(100, 255, 255))
    if State.Flying then
        ShowNotification("Fly", "You can now fly! Use WASD to move. (UI only)", 3)
    end
end)

CreateActionButton(tabs["Move"].content, "👻 Noclip", function()
    State.NoClip = not State.NoClip
    CreateTerminalMessage(GetCurrentTime(), "[MOVE]", "Noclip " .. (State.NoClip and "ENABLED" or "DISABLED") .. " (UI only)", Color3.fromRGB(200, 100, 255))
    if State.NoClip then
        ShowNotification("Noclip", "Walk through walls! (UI only)", 2)
    end
end)

CreateActionButton(tabs["Move"].content, "🌀 Teleport", function()
    ClearSettingsPanel()
    settingsPanel.Visible = true
    settingsPanelTitle.Text = "⚙ TELEPORT OPTIONS"
    
    CreateActionButton(settingsContent, "📍 Teleport to Mouse", function()
        CreateTerminalMessage(GetCurrentTime(), "[MOVE]", "Teleported to mouse position (UI only)", Color3.fromRGB(100, 255, 255))
    end)
    
    CreateActionButton(settingsContent, "🎯 Teleport to Spawn", function()
        CreateTerminalMessage(GetCurrentTime(), "[MOVE]", "Teleported to spawn (UI only)", Color3.fromRGB(100, 255, 255))
    end)
end, true)

-- ==============================
-- WORLD TAB FEATURES (UI ONLY)
-- ==============================
CreateActionButton(tabs["World"].content, "🌍 Server Info", function()
    local messages = {
        "═══════════════════════════",
        "SERVER INFORMATION",
        "═══════════════════════════",
        "Job ID: " .. game.JobId,
        "Place ID: " .. game.PlaceId,
        "Game Name: " .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
        "Players: " .. #Players:GetPlayers() .. "/" .. Players.MaxPlayers,
        "Server Region: " .. game:GetService("LocalizationService").RobloxLocaleId,
        "Ping: " .. math.floor(localPlayer:GetNetworkPing() * 1000) .. "ms",
        "═══════════════════════════"
    }
    CreateMultiLineTerminalMessage(GetCurrentTime(), "[WORLD]", messages, Color3.fromRGB(100, 180, 255))
end)

CreateActionButton(tabs["World"].content, "👥 Player List", function()
    local players = Players:GetPlayers()
    local messages = {"═══════════════════════════", "PLAYER LIST (" .. #players .. " online)", "═══════════════════════════"}
    
    for i, player in ipairs(players) do
        local prefix = player == localPlayer and "[YOU] " or ""
        if player.Name ~= player.DisplayName then
            table.insert(messages, i .. ". " .. prefix .. player.Name .. " (" .. player.DisplayName .. ")")
        else
            table.insert(messages, i .. ". " .. prefix .. player.Name)
        end
    end
    
    table.insert(messages, "═══════════════════════════")
    CreateMultiLineTerminalMessage(GetCurrentTime(), "[WORLD]", messages, Color3.fromRGB(100, 180, 255))
end)

CreateActionButton(tabs["World"].content, "🔄 Server Hop", function()
    CreateTerminalMessage(GetCurrentTime(), "[WORLD]", "Searching for new server... (UI only)", Color3.fromRGB(100, 180, 255))
    ShowNotification("Server Hop", "Finding a new server... (UI only)", 2)
end)

CreateActionButton(tabs["World"].content, "🔁 Rejoin", function()
    CreateTerminalMessage(GetCurrentTime(), "[WORLD]", "Rejoining server... (UI only)", Color3.fromRGB(100, 180, 255))
    ShowNotification("Rejoin", "Reconnecting to server... (UI only)", 2)
end)

CreateActionButton(tabs["World"].content, "📋 Copy Job ID", function()
    if setclipboard then
        setclipboard(game.JobId)
        CreateTerminalMessage(GetCurrentTime(), "[WORLD]", "Job ID copied: " .. game.JobId, Color3.fromRGB(100, 180, 255))
        ShowNotification("Clipboard", "Job ID copied!", 2)
    else
        CreateTerminalMessage(GetCurrentTime(), "[ERROR]", "Clipboard not supported", Color3.fromRGB(255, 100, 100))
    end
end)

CreateActionButton(tabs["World"].content, "🎮 Game Stats", function()
    local stats = game:GetService("Stats")
    local messages = {
        "═══════════════════════════",
        "GAME STATISTICS",
        "═══════════════════════════",
        "Physics FPS: " .. math.floor(1 / stats.HeartbeatTimeMs:GetValue()),
        "Data Recv: " .. math.floor(stats.DataReceiveKbps:GetValue()) .. " Kbps",
        "Data Send: " .. math.floor(stats.DataSendKbps:GetValue()) .. " Kbps",
        "Memory: " .. math.floor(stats:GetTotalMemoryUsageMb()) .. " MB",
        "Ping: " .. math.floor(localPlayer:GetNetworkPing() * 1000) .. "ms",
        "═══════════════════════════"
    }
    CreateMultiLineTerminalMessage(GetCurrentTime(), "[WORLD]", messages, Color3.fromRGB(100, 180, 255))
end)

-- ==============================
-- CONFIG TAB FEATURES (UI ONLY)
-- ==============================
CreateActionButton(tabs["Config"].content, "🎨 UI Theme", function()
    ClearSettingsPanel()
    settingsPanel.Visible = true
    settingsPanelTitle.Text = "⚙ UI THEME"
    
    CreateSettingsDropdown("Color Theme", {"Blue", "Red", "Green", "Purple", "Orange", "Cyan"}, State.Theme, function(option)
        State.Theme = option
        local newColor
        
        if option == "Blue" then
            newColor = Color3.fromRGB(80, 180, 255)
        elseif option == "Red" then
            newColor = Color3.fromRGB(255, 80, 80)
        elseif option == "Green" then
            newColor = Color3.fromRGB(80, 255, 80)
        elseif option == "Purple" then
            newColor = Color3.fromRGB(180, 80, 255)
        elseif option == "Orange" then
            newColor = Color3.fromRGB(255, 150, 80)
        elseif option == "Cyan" then
            newColor = Color3.fromRGB(80, 255, 255)
        end
        
        ApplyTheme(newColor)
        CreateTerminalMessage(GetCurrentTime(), "[CONFIG]", "Theme set to " .. option, Color3.fromRGB(150, 150, 255))
        ShowNotification("Theme Changed", "UI theme: " .. option, 2)
    end)
    
    CreateSettingsToggle("Notifications", State.Notifications, function(enabled)
        State.Notifications = enabled
        CreateTerminalMessage(GetCurrentTime(), "[CONFIG]", "Notifications " .. (enabled and "ON" or "OFF"), Color3.fromRGB(150, 150, 255))
    end)
    
    CreateSettingsToggle("Auto-Save Settings", State.AutoSave, function(enabled)
        State.AutoSave = enabled
        CreateTerminalMessage(GetCurrentTime(), "[CONFIG]", "Auto-save " .. (enabled and "ON" or "OFF"), Color3.fromRGB(150, 150, 255))
    end)
end, true)

CreateActionButton(tabs["Config"].content, "💾 Save Config", function()
    CreateTerminalMessage(GetCurrentTime(), "[CONFIG]", "Configuration saved successfully (UI only)", Color3.fromRGB(100, 255, 100))
    ShowNotification("Config Saved", "All settings saved! (UI only)", 2)
end)

CreateActionButton(tabs["Config"].content, "📁 Load Config", function()
    CreateTerminalMessage(GetCurrentTime(), "[CONFIG]", "Configuration loaded successfully (UI only)", Color3.fromRGB(100, 255, 100))
    ShowNotification("Config Loaded", "Settings restored! (UI only)", 2)
end)

CreateActionButton(tabs["Config"].content, "🔄 Reset Settings", function()
    State.WalkSpeed = 16
    State.JumpPower = 50
    State.GodMode = false
    State.Flying = false
    State.NoClip = false
    State.ESPEnabled = false
    State.Fullbright = false
    
    CreateTerminalMessage(GetCurrentTime(), "[CONFIG]", "All settings reset to default (UI only)", Color3.fromRGB(255, 180, 100))
    ShowNotification("Reset", "Settings restored to default (UI only)", 2)
end)

CreateActionButton(tabs["Config"].content, "📊 Command History", function()
    if #State.CommandHistory == 0 then
        CreateTerminalMessage(GetCurrentTime(), "[CONFIG]", "No command history yet", Color3.fromRGB(150, 150, 255))
    else
        local messages = {"═══════════════════════════", "COMMAND HISTORY (Last " .. math.min(#State.CommandHistory, 10) .. ")", "═══════════════════════════"}
        
        local start = math.max(1, #State.CommandHistory - 9)
        for i = start, #State.CommandHistory do
            local cmd = State.CommandHistory[i]
            table.insert(messages, "[" .. cmd.time .. "] " .. cmd.command)
        end
        
        table.insert(messages, "═══════════════════════════")
        CreateMultiLineTerminalMessage(GetCurrentTime(), "[CONFIG]", messages, Color3.fromRGB(150, 150, 255))
    end
end)

CreateActionButton(tabs["Config"].content, "❌ Destroy GUI", function()
    CreateTerminalMessage(GetCurrentTime(), "[SYSTEM]", "Destroying GUI in 3 seconds...", Color3.fromRGB(255, 100, 100))
    ShowNotification("Goodbye!", "GUI will be destroyed in 3s", 3)
    
    -- Fade out animation
    local fadeOut = TweenService:Create(MainFrame, TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
        BackgroundTransparency = 1
    })
    fadeOut:Play()
    
    task.wait(3)
    ScreenGui:Destroy()
end)

-- Set default tab
SwitchTab("Combat")

-- ==============================
-- COMMAND CONSOLE
-- ==============================
local commandBox = Instance.new("Frame")
commandBox.Parent = SidePanel
commandBox.BackgroundColor3 = Color3.fromRGB(15, 18, 25)
commandBox.BorderColor3 = themeColor
commandBox.BorderSizePixel = 2
commandBox.Position = UDim2.new(0, 5, 0, 435)
commandBox.Size = UDim2.new(1, -10, 0, 210)

local commandBoxCorner = Instance.new("UICorner")
commandBoxCorner.CornerRadius = UDim.new(0, 6)
commandBoxCorner.Parent = commandBox

local commandTitle = Instance.new("TextLabel")
commandTitle.Parent = commandBox
commandTitle.BackgroundTransparency = 1
commandTitle.Position = UDim2.new(0, 10, 0, 8)
commandTitle.Size = UDim2.new(1, -20, 0, 20)
commandTitle.Font = Enum.Font.Code
commandTitle.Text = "⌨ COMMAND CONSOLE"
commandTitle.TextColor3 = themeColor
commandTitle.TextSize = 14
commandTitle.TextXAlignment = Enum.TextXAlignment.Left

local commandInput = Instance.new("TextBox")
commandInput.Parent = commandBox
commandInput.BackgroundColor3 = Color3.fromRGB(10, 12, 15)
commandInput.BorderColor3 = themeColor
commandInput.BorderSizePixel = 1
commandInput.Position = UDim2.new(0, 10, 0, 35)
commandInput.Size = UDim2.new(1, -20, 0, 32)
commandInput.Font = Enum.Font.Code
commandInput.PlaceholderText = "Enter command... (Type /help for commands)"
commandInput.Text = ""
commandInput.TextColor3 = Color3.fromRGB(200, 200, 200)
commandInput.TextSize = 11
commandInput.TextXAlignment = Enum.TextXAlignment.Left
commandInput.ClearTextOnFocus = false

local cmdInputCorner = Instance.new("UICorner")
cmdInputCorner.CornerRadius = UDim.new(0, 4)
cmdInputCorner.Parent = commandInput

-- Command input animations
commandInput.Focused:Connect(function()
    TweenService:Create(commandInput, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(15, 18, 22),
        BorderColor3 = themeColor:Lerp(Color3.fromRGB(255, 255, 255), 0.3)
    }):Play()
end)

commandInput.FocusLost:Connect(function()
    TweenService:Create(commandInput, TweenInfo.new(0.2), {
        BackgroundColor3 = Color3.fromRGB(10, 12, 15),
        BorderColor3 = themeColor
    }):Play()
end)

local suggestionLabel = Instance.new("TextLabel")
suggestionLabel.Parent = commandBox
suggestionLabel.BackgroundTransparency = 1
suggestionLabel.Position = UDim2.new(0, 10, 0, 70)
suggestionLabel.Size = UDim2.new(1, -20, 0, 15)
suggestionLabel.Font = Enum.Font.Code
suggestionLabel.Text = ""
suggestionLabel.TextColor3 = Color3.fromRGB(100, 100, 110)
suggestionLabel.TextSize = 10
suggestionLabel.TextXAlignment = Enum.TextXAlignment.Left

local executeBtn = Instance.new("TextButton")
executeBtn.Parent = commandBox
executeBtn.BackgroundColor3 = themeColor
executeBtn.BorderSizePixel = 0
executeBtn.Position = UDim2.new(0, 10, 0, 90)
executeBtn.Size = UDim2.new(1, -20, 0, 32)
executeBtn.Font = Enum.Font.Code
executeBtn.Text = "▶ EXECUTE COMMAND"
executeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
executeBtn.TextSize = 12
executeBtn.AutoButtonColor = false

local executeBtnCorner = Instance.new("UICorner")
executeBtnCorner.CornerRadius = UDim.new(0, 4)
executeBtnCorner.Parent = executeBtn

executeBtn.MouseEnter:Connect(function()
    TweenService:Create(executeBtn, TweenInfo.new(0.2), {
        BackgroundColor3 = themeColor:Lerp(Color3.fromRGB(255, 255, 255), 0.2),
        Size = UDim2.new(1, -15, 0, 34)
    }):Play()
end)

executeBtn.MouseLeave:Connect(function()
    TweenService:Create(executeBtn, TweenInfo.new(0.2), {
        BackgroundColor3 = themeColor,
        Size = UDim2.new(1, -20, 0, 32)
    }):Play()
end)

executeBtn.MouseButton1Click:Connect(function()
    -- Click animation
    local clickTween = TweenService:Create(executeBtn, TweenInfo.new(0.1), {
        Size = UDim2.new(1, -25, 0, 28)
    })
    clickTween:Play()
    clickTween.Completed:Connect(function()
        local restoreTween = TweenService:Create(executeBtn, TweenInfo.new(0.1), {
            Size = UDim2.new(1, -20, 0, 32)
        })
        restoreTween:Play()
    end)
    
    pcall(executeCommand)
end)

local commandsList = Instance.new("TextLabel")
commandsList.Parent = commandBox
commandsList.BackgroundTransparency = 1
commandsList.Position = UDim2.new(0, 10, 0, 130)
commandsList.Size = UDim2.new(1, -20, 0, 70)
commandsList.Font = Enum.Font.Code
commandsList.Text = [[Quick Commands: /help, /players, /playerid
Movement: /tp [name], /view [name], /bang [name]
Fun: /pusheen, /ascii
Stop Actions: /view (stop), /bang (stop)
💡 Tip: Commands work with partial names!]]
commandsList.TextColor3 = Color3.fromRGB(120, 120, 130)
commandsList.TextSize = 10
commandsList.TextXAlignment = Enum.TextXAlignment.Left
commandsList.TextYAlignment = Enum.TextYAlignment.Top
commandsList.TextWrapped = true

-- ==============================
-- COMMAND SYSTEM
-- ==============================
local function findPlayerByNameOrDisplayName(name)
    if not name or name == "" then
        return nil, nil
    end
    
    name = name:lower()
    local matches = {}
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Name:lower() == name or player.DisplayName:lower() == name then
            return player, nil
        end
    end
    
    for _, player in ipairs(Players:GetPlayers()) do
        local username = player.Name:lower()
        local displayname = player.DisplayName:lower()
        
        if username:find(name, 1, true) or displayname:find(name, 1, true) then
            table.insert(matches, player)
        end
    end
    
    if #matches == 1 then
        return matches[1], nil
    elseif #matches > 1 then
        local bestMatch = matches[1]
        local shortestLength = #bestMatch.Name
        
        for _, player in ipairs(matches) do
            if #player.Name < shortestLength then
                bestMatch = player
                shortestLength = #player.Name
            end
        end
        
        return bestMatch, matches
    end
    
    return nil, nil
end

commandInput:GetPropertyChangedSignal("Text"):Connect(function()
    local text = commandInput.Text:lower()
    local args = {}
    for arg in text:gmatch("%S+") do
        table.insert(args, arg)
    end
    
    if #args >= 2 and (args[1] == "/tp" or args[1] == "/view" or args[1] == "/bang") then
        local searchTerm = table.concat(args, " ", 2)
        local players = Players:GetPlayers()
        local suggestions = {}
        
        for _, player in ipairs(players) do
            if player.Name:lower():find(searchTerm, 1, true) or 
               player.DisplayName:lower():find(searchTerm, 1, true) then
                if player.Name ~= player.DisplayName then
                    table.insert(suggestions, player.Name .. " (" .. player.DisplayName .. ")")
                else
                    table.insert(suggestions, player.Name)
                end
            end
        end
        
        if #suggestions > 0 then
            if #suggestions <= 3 then
                suggestionLabel.Text = "💡 Matches: " .. table.concat(suggestions, ", ")
            else
                suggestionLabel.Text = "💡 " .. #suggestions .. " players match your search"
            end
            
            -- Animate suggestion appearance
            suggestionLabel.TextTransparency = 0
            local fadeIn = TweenService:Create(suggestionLabel, TweenInfo.new(0.2), {
                TextTransparency = 0
            })
            fadeIn:Play()
        else
            local fadeOut = TweenService:Create(suggestionLabel, TweenInfo.new(0.2), {
                TextTransparency = 1
            })
            fadeOut:Play()
            fadeOut.Completed:Connect(function()
                suggestionLabel.Text = ""
            end)
        end
    else
        if suggestionLabel.Text ~= "" then
            local fadeOut = TweenService:Create(suggestionLabel, TweenInfo.new(0.2), {
                TextTransparency = 1
            })
            fadeOut:Play()
            fadeOut.Completed:Connect(function()
                suggestionLabel.Text = ""
            end)
        end
    end
end)

local function executeCommand()
    if commandInput.Text == "" then return end
    
    local timestamp = GetCurrentTime()
    local command = commandInput.Text:lower():match("^%s*(.-)%s*$")
    local args = {}
    for arg in commandInput.Text:gmatch("%S+") do
        table.insert(args, arg)
    end
    
    -- Log command
    CreateTerminalMessage(timestamp, "[CMD]", commandInput.Text, Color3.fromRGB(200, 200, 255))
    
    if command == "/help" then
        local helpMessages = {
            "═══════════════════════════════════════════════",
                    "🎮 NERDWAREOS - COMMAND HELP",
            "═══════════════════════════════════════════════",
            "",
            "📋 PLAYER COMMANDS:",
            "/players - List all players in server",
            "/playerid - List players with User IDs",
            "",
            "🚀 TELEPORT & MOVEMENT:",
            "/tp [player] - Teleport to a player",
            "/view [player] - Spectate a player's character",
            "/view - Stop spectating",
            "",
            "🎭 FUN COMMANDS:",
            "/bang [player] - Start bang animation on player",
            "/bang - Stop bang animation",
            "/pusheen - Display Pusheen cat ASCII art",
            "/ascii - Show random ASCII art",
            "",
            "ℹ️ INFORMATION:",
            "/ping - Show your current ping",
            "/fps - Display current FPS",
            "/time - Show current server time",
            "/stats - Display detailed server statistics",
            "",
            "💡 TIPS & TRICKS:",
            "• Use partial names: '/tp joh' finds 'JohnDoe123'",
            "• Both usernames and display names work",
            "• Tab system has 50+ features - explore them!",
            "• Use settings panel to customize each feature",
            "",
            "═══════════════════════════════════════════════"
        }
        CreateMultiLineTerminalMessage(timestamp, "[HELP]", helpMessages, Color3.fromRGB(100, 200, 255))
        
    elseif command == "/players" then
        local players = Players:GetPlayers()
        local messages = {"═══════════════════════════", "👥 PLAYERS ONLINE (" .. #players .. ")", "═══════════════════════════"}
        
        if #players == 0 then
            table.insert(messages, "No players online")
        else
            for i, player in ipairs(players) do
                local prefix = player == localPlayer and "[YOU] " or ""
                if player.Name ~= player.DisplayName then
                    table.insert(messages, i .. ". " .. prefix .. player.Name .. " (" .. player.DisplayName .. ")")
                else
                    table.insert(messages, i .. ". " .. prefix .. player.Name)
                end
            end
        end
        
        table.insert(messages, "═══════════════════════════")
        CreateMultiLineTerminalMessage(timestamp, "[INFO]", messages, Color3.fromRGB(80, 200, 100))
        
    elseif command == "/playerid" then
        local players = Players:GetPlayers()
        local messages = {"═══════════════════════════", "🆔 PLAYER IDS (" .. #players .. ")", "═══════════════════════════"}
        
        if #players == 0 then
            table.insert(messages, "No players online")
        else
            for i, player in ipairs(players) do
                local prefix = player == localPlayer and "[YOU] " or ""
                if player.Name ~= player.DisplayName then
                    table.insert(messages, i .. ". " .. prefix .. player.Name .. " (" .. player.DisplayName .. ") - ID: " .. player.UserId)
                else
                    table.insert(messages, i .. ". " .. prefix .. player.Name .. " - ID: " .. player.UserId)
                end
            end
        end
        
        table.insert(messages, "═══════════════════════════")
        CreateMultiLineTerminalMessage(timestamp, "[INFO]", messages, Color3.fromRGB(80, 200, 100))
        
    elseif args[1] == "/tp" and args[2] then
        local searchTerm = table.concat(args, " ", 2)
        local targetPlayer, allMatches = findPlayerByNameOrDisplayName(searchTerm)
        
        if targetPlayer then
            if allMatches and #allMatches > 1 then
                local matchNames = {}
                for _, player in ipairs(allMatches) do
                    if player.Name ~= player.DisplayName then
                        table.insert(matchNames, player.Name .. " (" .. player.DisplayName .. ")")
                    else
                        table.insert(matchNames, player.Name)
                    end
                end
                CreateTerminalMessage(timestamp, "[WARNING]", "Multiple matches: " .. table.concat(matchNames, ", "), Color3.fromRGB(255, 180, 100))
                CreateTerminalMessage(timestamp, "[INFO]", "Teleporting to best match: " .. targetPlayer.Name, Color3.fromRGB(100, 180, 255))
            end
            
            if targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    localPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
                    CreateTerminalMessage(timestamp, "[SUCCESS]", "✓ Teleported to " .. targetPlayer.Name, Color3.fromRGB(80, 200, 100))
                    ShowNotification("Teleported", "You are now at " .. targetPlayer.Name, 2)
                else
                    CreateTerminalMessage(timestamp, "[ERROR]", "Your character not loaded", Color3.fromRGB(255, 100, 100))
                end
            else
                CreateTerminalMessage(timestamp, "[ERROR]", "Target player's character not loaded", Color3.fromRGB(255, 100, 100))
            end
        else
            CreateTerminalMessage(timestamp, "[ERROR]", "No player found: '" .. searchTerm .. "'", Color3.fromRGB(255, 100, 100))
        end
        
    elseif args[1] == "/view" then
        if args[2] then
            local searchTerm = table.concat(args, " ", 2)
            local targetPlayer = findPlayerByNameOrDisplayName(searchTerm)
            
            if targetPlayer then
                if targetPlayer == localPlayer then
                    CreateTerminalMessage(timestamp, "[ERROR]", "Cannot spectate yourself", Color3.fromRGB(255, 100, 100))
                    return
                end
                
                if not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("Humanoid") or targetPlayer.Character.Humanoid.Health <= 0 then
                    CreateTerminalMessage(timestamp, "[ERROR]", "Player is not alive", Color3.fromRGB(255, 100, 100))
                    return
                end
                
                State.Viewing = true
                State.TargetPlayer = targetPlayer
                Camera.CameraType = Enum.CameraType.Follow
                Camera.CameraSubject = targetPlayer.Character:FindFirstChild("Humanoid")
                CreateTerminalMessage(timestamp, "[INFO]", "👁 Spectating " .. targetPlayer.Name .. " - Type /view to stop", Color3.fromRGB(80, 200, 100))
                ShowNotification("Spectating", "Now viewing " .. targetPlayer.Name, 2)
            else
                CreateTerminalMessage(timestamp, "[ERROR]", "No player found: '" .. searchTerm .. "'", Color3.fromRGB(255, 100, 100))
            end
        else
            if State.Viewing then
                State.Viewing = false
                local previousTarget = State.TargetPlayer and State.TargetPlayer.Name or "player"
                State.TargetPlayer = nil
                Camera.CameraType = Enum.CameraType.Custom
                Camera.CameraSubject = localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid")
                CreateTerminalMessage(timestamp, "[INFO]", "Stopped spectating " .. previousTarget, Color3.fromRGB(80, 200, 100))
            else
                CreateTerminalMessage(timestamp, "[ERROR]", "Not spectating anyone. Use /view [player]", Color3.fromRGB(255, 100, 100))
            end
        end
        
    elseif args[1] == "/bang" then
        if args[2] then
            local searchTerm = table.concat(args, " ", 2)
            local targetPlayer = findPlayerByNameOrDisplayName(searchTerm)
            
            if targetPlayer then
                if targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    if not State.BangMode then
                        State.BangMode = true
                        State.BangTarget = targetPlayer
                        
                        local humanoid = localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            local animation = Instance.new("Animation")
                            animation.AnimationId = "rbxassetid://148840371"
                            State.BangAnimation = humanoid:LoadAnimation(animation)
                            State.BangAnimation:Play()
                            State.BangAnimation.Looped = true
                        end
                        
                        task.spawn(function()
                            while State.BangMode and State.BangTarget do
                                local targetChar = State.BangTarget.Character
                                local localChar = localPlayer.Character
                                
                                if targetChar and targetChar:FindFirstChild("HumanoidRootPart") and 
                                   localChar and localChar:FindFirstChild("HumanoidRootPart") then
                                    local targetHRP = targetChar.HumanoidRootPart
                                    local localHRP = localChar.HumanoidRootPart
                                    
                                    local offset = targetHRP.CFrame.LookVector * -2
                                    localHRP.CFrame = targetHRP.CFrame * CFrame.new(0, 0, 2)
                                    
                                    task.wait(0.1)
                                else
                                    State.BangMode = false
                                    break
                                end
                            end
                            
                            if State.BangAnimation then
                                State.BangAnimation:Stop()
                                State.BangAnimation = nil
                            end
                        end)
                        
                        CreateTerminalMessage(timestamp, "[INFO]", "🔥 Started on " .. targetPlayer.Name, Color3.fromRGB(255, 150, 150))
                        ShowNotification("Bang Mode", "Active on " .. targetPlayer.Name, 2)
                    else
                        CreateTerminalMessage(timestamp, "[ERROR]", "Already active! Use /bang to stop", Color3.fromRGB(255, 100, 100))
                    end
                else
                    CreateTerminalMessage(timestamp, "[ERROR]", "Player's character not loaded", Color3.fromRGB(255, 100, 100))
                end
            else
                CreateTerminalMessage(timestamp, "[ERROR]", "No player found: '" .. searchTerm .. "'", Color3.fromRGB(255, 100, 100))
            end
        else
            if State.BangMode then
                local previousTarget = State.BangTarget and State.BangTarget.Name or "player"
                State.BangMode = false
                State.BangTarget = nil
                if State.BangAnimation then
                    State.BangAnimation:Stop()
                    State.BangAnimation = nil
                end
                CreateTerminalMessage(timestamp, "[INFO]", "Stopped on " .. previousTarget, Color3.fromRGB(80, 200, 100))
            else
                CreateTerminalMessage(timestamp, "[ERROR]", "Not active. Use /bang [player]", Color3.fromRGB(255, 100, 100))
            end
        end
        
    elseif command == "/pusheen" then
        local pusheenArt = {
            "───────────────────────────────────────",
            "───▐▀▄───────▄▀▌───▄▄▄▄▄▄▄─────────────",
            "───▌▒▒▀▄▄▄▄▄▀▒▒▐▄▀▀▒██▒██▒▀▀▄──────────",
            "──▐▒▒▒▒▀▒▀▒▀▒▒▒▒◎◎◎◎◎◎◎◎◎◎◎◎▒▀▄────────",
            "──▌◎◎◎◎◎◎◎◎◎◎◎◎▒▄◎◎◎◎◎◎◎◎◎◎◎▀▄──────",
            "▀█◎◎◎█▌◎◎█◎◎▐█◎◎▒▀◎◎◎◎◎◎◎◎◎◎◎▒▌─────",
            "▀▌◎◎◎◎◎▀▒▀◎◎◎◎◎▀▀◎◎◎◎◎◎◎◎◎◎◎◎▐───▄▄",
            "▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒▌▄█▒█",
            "▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒█▒█▀─",
            "▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒█▀───",
            "▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒▌────",
            "─▌◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒▐─────",
            "─▐◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▒▌─────",
            "──▌◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▐──────",
            "──▐▄◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎◎▄▌──────",
            "────▀▄▄▀▀▀▀▀▄▄▀▀▀▀▀▀▀▄▄▀▀▀▀▀▄▄▀────────"
        }
        CreateMultiLineTerminalMessage(timestamp, "[ASCII]", pusheenArt, Color3.fromRGB(150, 200, 100))
        
    elseif command == "/ping" then
        local ping = math.floor(localPlayer:GetNetworkPing() * 1000)
        CreateTerminalMessage(timestamp, "[INFO]", "Your ping: " .. ping .. "ms", Color3.fromRGB(100, 180, 255))
        
    elseif command == "/fps" then
        local fps = math.floor(1 / RunService.Heartbeat:Wait())
        CreateTerminalMessage(timestamp, "[INFO]", "Current FPS: " .. fps, Color3.fromRGB(100, 180, 255))
        
    elseif command == "/time" then
        local currentTime = os.date("%H:%M:%S")
        local currentDate = os.date("%Y-%m-%d")
        CreateTerminalMessage(timestamp, "[INFO]", "Server time: " .. currentTime .. " | Date: " .. currentDate, Color3.fromRGB(100, 180, 255))
        
    elseif command == "/stats" then
        local stats = game:GetService("Stats")
        local messages = {
            "═══════════════════════════",
            "📊 DETAILED STATISTICS",
            "═══════════════════════════",
            "FPS: " .. math.floor(1 / RunService.Heartbeat:Wait()),
            "Ping: " .. math.floor(localPlayer:GetNetworkPing() * 1000) .. "ms",
            "Memory: " .. math.floor(stats:GetTotalMemoryUsageMb()) .. " MB",
            "Players: " .. #Players:GetPlayers() .. "/" .. Players.MaxPlayers,
            "Data Recv: " .. math.floor(stats.DataReceiveKbps:GetValue()) .. " Kbps",
            "Data Send: " .. math.floor(stats.DataSendKbps:GetValue()) .. " Kbps",
            "Physics FPS: " .. math.floor(1 / stats.HeartbeatTimeMs:GetValue()),
            "═══════════════════════════"
        }
        CreateMultiLineTerminalMessage(timestamp, "[STATS]", messages, Color3.fromRGB(100, 180, 255))
        
    elseif command == "/ascii" then
        local asciiArts = {
            {
                "    /\\_/\\  ",
                "   ( o.o ) ",
                "    > ^ <  ",
                "   /|   |\\",
                "  (_|   |_)"
            },
            {
                "  ___  ",
                " {o,o} ",
                " |)__) ",
                " -\"-\"-",
                " OWL  "
            },
            {
                "   ^__^  ",
                "   (oo)\\_______",
                "   (__)\\       )\\/\\",
                "       ||----w |",
                "       ||     ||"
            }
        }
        local randomArt = asciiArts[math.random(1, #asciiArts)]
        CreateMultiLineTerminalMessage(timestamp, "[ASCII]", randomArt, Color3.fromRGB(150, 200, 100))
        
    else
        CreateTerminalMessage(timestamp, "[ERROR]", "Unknown command: " .. commandInput.Text .. " - Type /help", Color3.fromRGB(255, 100, 100))
    end
    
    commandInput.Text = ""
    suggestionLabel.Text = ""
end

commandInput.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        pcall(executeCommand)
    end
end)

-- ==============================
-- MONITORING & UPDATES
-- ==============================

-- Monitor viewing state
RunService.Heartbeat:Connect(function()
    if State.Viewing and State.TargetPlayer then
        if not State.TargetPlayer.Parent or not State.TargetPlayer.Character or 
           not State.TargetPlayer.Character:FindFirstChild("Humanoid") or 
           State.TargetPlayer.Character.Humanoid.Health <= 0 then
            State.Viewing = false
            local previousTarget = State.TargetPlayer and State.TargetPlayer.Name or "player"
            State.TargetPlayer = nil
            Camera.CameraType = Enum.CameraType.Custom
            Camera.CameraSubject = localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid")
            CreateTerminalMessage(GetCurrentTime(), "[INFO]", 
                                 "Target '" .. previousTarget .. "' no longer valid. Spectating stopped.", 
                                 Color3.fromRGB(255, 100, 100))
        end
    end
end)

-- ==============================
-- CURSOR & EFFECTS
-- ==============================
local cursor = Instance.new("TextLabel")
cursor.Parent = TerminalFrame
cursor.BackgroundTransparency = 1
cursor.Position = UDim2.new(0, 5, 0, 0)
cursor.Size = UDim2.new(0, 10, 0, 15)
cursor.Font = Enum.Font.Code
cursor.Text = "█"
cursor.TextColor3 = themeColor
cursor.TextSize = 12
cursor.LayoutOrder = 9999999999

-- Blinking cursor animation with color change
task.spawn(function()
    local hue = 0
    while task.wait(0.5) do
        cursor.TextTransparency = cursor.TextTransparency == 0 and 1 or 0
        
        -- Rainbow color effect
        hue = (hue + 10) % 360
        local color = Color3.fromHSV(hue/360, 0.8, 1)
        TweenService:Create(cursor, TweenInfo.new(0.5), {
            TextColor3 = color
        }):Play()
    end
end)

-- Auto-scroll to bottom with smooth animation
messagesLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    local targetPosition = Vector2.new(0, TerminalFrame.AbsoluteCanvasSize.Y)
    local distance = (targetPosition - TerminalFrame.CanvasPosition).Magnitude
    
    if distance > 100 then
        -- Smooth scroll for large distances
        local scrollTween = TweenService:Create(TerminalFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
            CanvasPosition = targetPosition
        })
        scrollTween:Play()
    else
        -- Instant scroll for small distances
        TerminalFrame.CanvasPosition = targetPosition
    end
end)

-- ==============================
-- VERSION INFO
-- ==============================
local versionLabel = Instance.new("TextLabel")
versionLabel.Parent = SidePanel
versionLabel.BackgroundTransparency = 1
versionLabel.Position = UDim2.new(0, 5, 1, -20)
versionLabel.Size = UDim2.new(1, -10, 0, 15)
versionLabel.Font = Enum.Font.Code
versionLabel.Text = "NerdWareOS Works On Any Game | " .. GetCurrentDate()
versionLabel.TextColor3 = Color3.fromRGB(80, 80, 80)
versionLabel.TextSize = 9
versionLabel.TextXAlignment = Enum.TextXAlignment.Right

-- ==============================
-- THEME APPLICATION SYSTEM
-- ==============================
function ApplyTheme(newThemeColor)
    if not newThemeColor or typeof(newThemeColor) ~= "Color3" then
        warn("Invalid theme color, reverting to default")
        newThemeColor = Color3.fromRGB(80, 180, 255)
    end
    themeColor = newThemeColor
    
    -- Update all UI elements with new theme
    TerminalFrame.ScrollBarImageColor3 = themeColor
    logo.TextColor3 = themeColor
    welcomeText.TextColor3 = themeColor
    cursor.TextColor3 = themeColor
    
    statusBox.BorderColor3 = themeColor
    statusTitle.TextColor3 = themeColor
    
    mainStroke.Color = themeColor
    
    settingsPanel.BorderColor3 = themeColor
    settingsPanelTitle.TextColor3 = themeColor
    settingsContent.BorderColor3 = themeColor:Lerp(Color3.fromRGB(40, 90, 140), 0.5)
    settingsContent.ScrollBarImageColor3 = themeColor
    
    tabContainer.BorderColor3 = themeColor
    tabTitle.TextColor3 = themeColor
    tabContentArea.BorderColor3 = themeColor:Lerp(Color3.fromRGB(40, 90, 140), 0.5)
    
    for _, data in pairs(tabs) do
        data.button.BorderColor3 = themeColor
        data.button.TextColor3 = themeColor
        data.content.ScrollBarImageColor3 = themeColor
    end
    
    commandBox.BorderColor3 = themeColor
    commandTitle.TextColor3 = themeColor
    commandInput.BorderColor3 = themeColor
    executeBtn.BackgroundColor3 = themeColor
    
    -- Create a flash effect
    local flash = Instance.new("Frame")
    flash.Parent = MainFrame
    flash.BackgroundColor3 = themeColor
    flash.BackgroundTransparency = 0.7
    flash.BorderSizePixel = 0
    flash.Size = UDim2.new(1, 0, 1, 0)
    flash.ZIndex = 1000
    
    local flashCorner = Instance.new("UICorner")
    flashCorner.CornerRadius = UDim.new(0, 8)
    flashCorner.Parent = flash
    
    local fadeOut = TweenService:Create(flash, TweenInfo.new(0.5), {
        BackgroundTransparency = 1
    })
    fadeOut:Play()
    fadeOut.Completed:Connect(function()
        flash:Destroy()
    end)
end

-- ==============================
-- GUI PERSISTENCE
-- ==============================
local function ensureGuiExists()
    if not playerGui:FindFirstChild("NerdWareOS") then
        ScreenGui.Parent = playerGui
        
        -- Re-entrance animation
        MainFrame.Position = UDim2.new(0.5, -600, 0.5, -700)
        local entranceTween = TweenService:Create(MainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
            Position = UDim2.new(0.5, -600, 0.5, -350)
        })
        entranceTween:Play()
        
        CreateTerminalMessage(GetCurrentTime(), "[SYSTEM]", "GUI reinitialized after respawn", Color3.fromRGB(80, 200, 100))
    end
end

localPlayer.CharacterAdded:Connect(function()
    task.wait(2)
    ensureGuiExists()
end)

-- ==============================
-- INITIALIZATION COMPLETE
-- ==============================
task.wait(0.2)
TerminalFrame.CanvasPosition = Vector2.new(0, TerminalFrame.AbsoluteCanvasSize.Y)

-- Final startup messages
task.delay(1.5, function()
    CreateTerminalMessage(GetCurrentTime(), "[SUCCESS]", "✓ All systems loaded successfully!", Color3.fromRGB(100, 255, 100))
    ShowNotification("Welcome!", "NerdWareOS v4.0 is ready!", 3)
end)

-- Ensure character readiness
ensureGuiExists()
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
task.wait(2)

if character and character.Parent then
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        CreateTerminalMessage(GetCurrentTime(), "[SYSTEM]", "✓ Character loaded and ready", Color3.fromRGB(80, 200, 100))
    end
end

-- Initial theme application
ApplyTheme(themeColor)
