-- Configuration and Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Orbit Variables
local orbitDistance = 10
local orbitSpeed = 5
local orbitAngle = 0
local targetPlayerName = ""
local isOrbiting = false
local dropdownMenu -- Variable to store the dropdown menu frame
local guiVisible = false -- Tracks visibility of the GUI

-- Create the Screen GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.Enabled = false  -- Initially, the GUI is not visible

-- Create a Frame for the GUI with rounded corners
local function createRoundedFrame(parent, size, position, backgroundColor)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = backgroundColor
    frame.BorderSizePixel = 0
    frame.Parent = parent

    -- Create UIStroke for rounded corners
    local stroke = Instance.new("UIStroke", frame)
    stroke.Color = Color3.fromRGB(0, 0, 0)
    stroke.Thickness = 2
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

    -- Create UICorner for rounded edges
    local corner = Instance.new("UICorner", frame)
    corner.CornerRadius = UDim.new(0, 10) -- Adjust radius for more/less curvature
    
    return frame
end

-- Main GUI frame
local frame = createRoundedFrame(screenGui, UDim2.new(0, 300, 0, 300), UDim2.new(0.5, -150, 0.5, -150), Color3.fromRGB(60, 60, 60))

-- Title Bar
local titleBar = createRoundedFrame(frame, UDim2.new(1, 0, 0, 30), UDim2.new(0, 0, 0, 0), Color3.fromRGB(70, 70, 70))

-- Title Text
local titleText = Instance.new("TextLabel")
titleText.Text = "Orbit Control"
titleText.Size = UDim2.new(1, 0, 1, 0)
titleText.BackgroundTransparency = 1
titleText.Font = Enum.Font.SourceSansBold
titleText.TextColor3 = Color3.new(1, 1, 1)
titleText.TextSize = 24
titleText.Parent = titleBar

-- Draggable Functionality
local dragging = false 
local dragInput, dragStart, startPos 

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position 
        startPos = frame.Position

        UserInputService.InputChanged:Connect(function(input2)
            if dragging and input2.UserInputType == Enum.UserInputType.MouseMovement then
                local delta = input2.Position - dragStart
                frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end
end)

titleBar.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

-- Create TextBox for Orbit Speed
local speedBox = Instance.new("TextBox")
speedBox.PlaceholderText = "Orbit Speed"
speedBox.Size = UDim2.new(1, 0, 0, 50)
speedBox.Position = UDim2.new(0, 0, 0.2, 0)
speedBox.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
speedBox.BorderSizePixel = 0
speedBox.Font = Enum.Font.SourceSans
speedBox.TextColor3 = Color3.new(1, 1, 1)
speedBox.TextSize = 20
speedBox.Parent = frame
speedBox.FocusLost:Connect(function()
    local userInput = tonumber(speedBox.Text)
    if userInput then
        orbitSpeed = userInput
    else
        speedBox.Text = tostring(orbitSpeed)
    end
end)

-- Create TextBox for Orbit Distance
local distanceBox = Instance.new("TextBox")
distanceBox.PlaceholderText = "Orbit Distance"
distanceBox.Size = UDim2.new(1, 0, 0, 50)
distanceBox.Position = UDim2.new(0, 0, 0.3, 0)
distanceBox.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
distanceBox.BorderSizePixel = 0
distanceBox.Font = Enum.Font.SourceSans
distanceBox.TextColor3 = Color3.new(1, 1, 1)
distanceBox.TextSize = 20
distanceBox.Parent = frame
distanceBox.FocusLost:Connect(function()
    local userInput = tonumber(distanceBox.Text)
    if userInput then
        orbitDistance = userInput
    else
        distanceBox.Text = tostring(orbitDistance)
    end
end)

-- Create Toggle button for Orbit
local toggleButton = Instance.new("TextButton")
toggleButton.Text = "Toggle Orbit"
toggleButton.Size = UDim2.new(1, 0, 0, 50)
toggleButton.Position = UDim2.new(0, 0, 0.5, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
toggleButton.BorderSizePixel = 0
toggleButton.Font = Enum.Font.SourceSansSemibold
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.TextSize = 20
toggleButton.Parent = frame

-- Create Dropdown Button for Select Player
local dropdown = Instance.new("TextButton")
dropdown.Text = "Select Player"
dropdown.Size = UDim2.new(1, 0, 0, 50)
dropdown.Position = UDim2.new(0, 0, 0.7, 0)
dropdown.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
dropdown.BorderSizePixel = 0
dropdown.Font = Enum.Font.SourceSansSemibold
dropdown.TextColor3 = Color3.new(1, 1, 1)
dropdown.TextSize = 20
dropdown.Parent = frame

-- Hover Effect for Button (This function should be concatenated)
local function hoverEffect(button, isHovered)
    button.BackgroundColor3 = isHovered and Color3.fromRGB(100, 100, 100) or Color3.fromRGB(80, 80, 80)
end

-- Function to update the player dropdown options
local function updatePlayerDropdown()
    local playerNames = {}
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer.Name ~= player.Name then
            table.insert(playerNames, otherPlayer.Name)
        end
    end
    return playerNames
end

-- Toggle dropdown visibility function
local function toggleDropdown()
    if dropdownMenu then
        dropdownMenu:Destroy() 
        dropdownMenu = nil
    else
        local playerNames = updatePlayerDropdown()
        dropdownMenu = Instance.new("Frame")
        dropdownMenu.Size = UDim2.new(1, 0, 0, math.min(30 * #playerNames, 150))
        dropdownMenu.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        dropdownMenu.BorderSizePixel = 0
        dropdownMenu.Position = UDim2.new(0, 0, 1, -10) 
        dropdownMenu.Parent = dropdown

        local layout = Instance.new("UIListLayout")
        layout.Parent = dropdownMenu

        for _, name in pairs(playerNames) do
            local button = Instance.new("TextButton")
            button.Text = name
            button.Size = UDim2.new(1, 0, 0, 30)
            button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
            button.BorderSizePixel = 0
            button.Font = Enum.Font.SourceSans
            button.TextColor3 = Color3.new(1, 1, 1)
            button.TextSize = 18
            button.Parent = dropdownMenu
            
            button.MouseEnter:Connect(function() hoverEffect(button, true) end)
            button.MouseLeave:Connect(function() hoverEffect(button, false) end)
            
            button.MouseButton1Click:Connect(function()
                targetPlayerName = name
                dropdown.Text = "Selected: " .. targetPlayerName
                dropdownMenu:Destroy() 
                dropdownMenu = nil
            end)
        end
        
        -- Prevent clicks on buttons below the dropdown
        dropdownMenu.MouseButton1Click:Connect(function()
            return
        end)
    end
end

dropdown.MouseButton1Click:Connect(toggleDropdown)

-- Close dropdown when clicking outside
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if dropdownMenu and not gameProcessed then
        local mouseLocation = UserInputService:GetMouseLocation()
        local dropdownPosition = dropdown.AbsolutePosition
        local dropdownSize = dropdown.AbsoluteSize

        if not (mouseLocation.X >= dropdownPosition.X and mouseLocation.X <= dropdownPosition.X + dropdownSize.X and
                mouseLocation.Y >= dropdownPosition.Y and mouseLocation.Y <= dropdownPosition.Y + dropdownSize.Y) then
            dropdownMenu:Destroy() 
            dropdownMenu = nil
        end
    end
end)

-- Toggle orbit functionality
toggleButton.MouseButton1Click:Connect(function()
    isOrbiting = not isOrbiting
    toggleButton.Text = isOrbiting and "Stop Orbit" or "Toggle Orbit"
end)

-- Orbit logic
RunService.Heartbeat:Connect(function(deltaTime)
    if not isOrbiting then return end

    local targetPlayer = Players:FindFirstChild(targetPlayerName)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
        
        -- Update orbit angle
        orbitAngle = orbitAngle + (orbitSpeed * deltaTime)
        
        -- Calculate new position
        local offset = Vector3.new(
            math.cos(orbitAngle) * orbitDistance,
            0,
            math.sin(orbitAngle) * orbitDistance
        )
        
        -- Set new position and orientation
        humanoidRootPart.CFrame = CFrame.new(targetPosition + offset) * CFrame.Angles(0, orbitAngle + math.pi / 2, 0)
    end
end)

-- Listen for the 'B' key press to toggle the GUI
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.B then
        guiVisible = not guiVisible
        screenGui.Enabled = guiVisible -- Show or hide the GUI based on the toggle
    end
end)
