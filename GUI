-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local HttpService = game:GetService("HttpService")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Constants for layout (smaller dimensions)
local WIDTH_MAIN = 600
local WIDTH_SIDE = 220
local GAP = 15
local HEIGHT = 400

-- Performance optimizations
local debounce = {}
local connections = {}

local function debounceCheck(id, cooldown)
    cooldown = cooldown or 0.5
    if debounce[id] and (os.clock() - debounce[id]) < cooldown then
        return true
    end
    debounce[id] = os.clock()
    return false
end

local function safeConnect(event, callback)
    local connection = event:Connect(callback)
    table.insert(connections, connection)
    return connection
end

local function cleanup()
    for _, connection in ipairs(connections) do
        connection:Disconnect()
    end
    if blur and blur.Parent then
        blur:Destroy()
    end
    if ScreenGui and ScreenGui.Parent then
        ScreenGui:Destroy()
    end
    if WatermarkGui and WatermarkGui.Parent then
        WatermarkGui:Destroy()
    end
    if StatusGui and StatusGui.Parent then
        StatusGui:Destroy()
    end
    if KeybindsGui and KeybindsGui.Parent then
        KeybindsGui:Destroy()
    end
end

-- Utility helpers
local function addCorner(obj, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = UDim.new(0, radius or 6)
    c.Parent = obj
    return c
end

local function addStroke(obj, color, thickness)
    local s = Instance.new("UIStroke")
    s.Thickness = thickness or 1
    s.Color = color or Color3.fromRGB(60, 60, 60)
    s.Transparency = 0.2
    s.Parent = obj
    return s
end

-- Create Watermark
local WatermarkGui = Instance.new("ScreenGui")
WatermarkGui.Name = "WatermarkClock"
WatermarkGui.ResetOnSpawn = false
WatermarkGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
WatermarkGui.Parent = PlayerGui

-- Watermark frame
local Watermark = Instance.new("Frame")
Watermark.Name = "Watermark"
Watermark.Parent = WatermarkGui
Watermark.Size = UDim2.new(0, 200, 0, 24)
Watermark.Position = UDim2.new(0, 8, 0, 8)
Watermark.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
Watermark.BackgroundTransparency = 0.05
addCorner(Watermark, 6)
addStroke(Watermark, Color3.fromRGB(80, 80, 80), 1)

-- Username label (left side)
local UsernameLabel = Instance.new("TextLabel")
UsernameLabel.Parent = Watermark
UsernameLabel.Size = UDim2.new(0.5, -5, 1, 0)
UsernameLabel.Position = UDim2.new(0, 5, 0, 0)
UsernameLabel.BackgroundTransparency = 1
UsernameLabel.Font = Enum.Font.GothamMedium
UsernameLabel.TextSize = 12
UsernameLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
UsernameLabel.TextXAlignment = Enum.TextXAlignment.Left
UsernameLabel.Text = Player.Name

-- Time/Date label (right side)
local TimeLabel = Instance.new("TextLabel")
TimeLabel.Parent = Watermark
TimeLabel.Size = UDim2.new(0.5, -5, 1, 0)
TimeLabel.Position = UDim2.new(0.5, 0, 0, 0)
TimeLabel.BackgroundTransparency = 1
TimeLabel.Font = Enum.Font.GothamMedium
TimeLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
TimeLabel.TextXAlignment = Enum.TextXAlignment.Right
TimeLabel.TextSize = 11

-- Function to update time/date
local function updateTime()
    local time = os.date("*t")
    local hour = string.format("%02d", time.hour)
    local min = string.format("%02d", time.min)
    local sec = string.format("%02d", time.sec)
    local day = os.date("%A"):sub(1, 3) -- Short day name
    TimeLabel.Text = string.format("%s:%s:%s | %s", hour, min, sec, day)
end

-- Update watermark time
spawn(
    function()
        while Watermark and Watermark.Parent do
            updateTime()
            UsernameLabel.Text = Player.Name
            wait(1)
        end
    end
)

-- Create NerdWare Status Bar
local StatusGui = Instance.new("ScreenGui")
StatusGui.Name = "NerdWareStatusBar"
StatusGui.ResetOnSpawn = false
StatusGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
StatusGui.Parent = PlayerGui

-- Status bar frame
local NerdWareStatusBar = Instance.new("Frame")
NerdWareStatusBar.Name = "StatusBar"
NerdWareStatusBar.Parent = StatusGui
NerdWareStatusBar.Size = UDim2.new(0, 200, 0, 20) -- initial size
NerdWareStatusBar.Position = UDim2.new(0, 8, 0, 36) -- Positioned under the watermark
NerdWareStatusBar.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
NerdWareStatusBar.BackgroundTransparency = 0.05
addCorner(NerdWareStatusBar, 6)
addStroke(NerdWareStatusBar, Color3.fromRGB(80, 80, 80), 1)

-- Status text label
local StatusText = Instance.new("TextLabel")
StatusText.Parent = NerdWareStatusBar
StatusText.Size = UDim2.new(1, -8, 1, 0)
StatusText.Position = UDim2.new(0, 4, 0, 0)
StatusText.BackgroundTransparency = 1
StatusText.Font = Enum.Font.GothamMedium
StatusText.TextSize = 12
StatusText.TextColor3 = Color3.fromRGB(230, 230, 230)
StatusText.TextXAlignment = Enum.TextXAlignment.Left
StatusText.Text = "FPS: -- | NerdWare"

-- Function to auto-resize StatusBar based on text width
local function updateBarSize()
    local padding = 10
    local textWidth = StatusText.TextBounds.X
    NerdWareStatusBar.Size = UDim2.new(0, textWidth + padding, 0, 20)
end

-- Update FPS and resize every frame
RunService.RenderStepped:Connect(
    function(dt)
        if dt > 0 then
            local fps = 1 / dt
            StatusText.Text = string.format("FPS: %.0f | NerdWare", fps)
            updateBarSize()
        end
    end
)

--//////////////////////////////////////////////////////
-- Keybinds GUI (Matching Style)
--//////////////////////////////////////////////////////

local KeybindsGui = Instance.new("ScreenGui")
KeybindsGui.Name = "KeybindsUI"
KeybindsGui.ResetOnSpawn = false
KeybindsGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
KeybindsGui.Parent = PlayerGui

-- Main Frame
local KeybindFrame = Instance.new("Frame")
KeybindFrame.Name = "KeybindList"
KeybindFrame.Parent = KeybindsGui
KeybindFrame.Size = UDim2.new(0, 200, 0, 110)
KeybindFrame.AnchorPoint = Vector2.new(0, 0.5)
KeybindFrame.Position = UDim2.new(0, 8, 0.5, 0)
KeybindFrame.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
KeybindFrame.BackgroundTransparency = 0.05
addCorner(KeybindFrame, 6)
addStroke(KeybindFrame, Color3.fromRGB(80, 80, 80), 1)

-- Title
local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Parent = KeybindFrame
Title.Size = UDim2.new(1, -10, 0, 20)
Title.Position = UDim2.new(0, 5, 0, 2)
Title.BackgroundTransparency = 1
Title.Text = "Keybinds"
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Font = Enum.Font.GothamMedium
Title.TextSize = 14
Title.TextColor3 = Color3.fromRGB(230, 230, 230)

-- Content Container
local Content = Instance.new("Frame")
Content.Name = "Content"
Content.Parent = KeybindFrame
Content.Position = UDim2.new(0, 5, 0, 25)
Content.Size = UDim2.new(1, -10, 1, -30)
Content.BackgroundTransparency = 1

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = Content
UIListLayout.Padding = UDim.new(0, 4)
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

-- Create a table to store keybind information
local keybinds = {}

-- Function to Add Keybind (matching your style)
local function AddKeybind(mode, name, key)
    local KeyLabel = Instance.new("TextLabel")
    KeyLabel.Parent = Content
    KeyLabel.Size = UDim2.new(1, 0, 0, 18)
    KeyLabel.BackgroundTransparency = 1
    KeyLabel.TextXAlignment = Enum.TextXAlignment.Left
    KeyLabel.Font = Enum.Font.GothamMedium
    KeyLabel.TextSize = 12
    KeyLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
    KeyLabel.Text = "(" .. mode .. ") " .. name .. " - " .. key

    -- Store the keybind information
    table.insert(
        keybinds,
        {
            label = KeyLabel,
            keyCode = Enum.KeyCode[key],
            mode = mode:lower()
        }
    )

    return KeyLabel
end

-- Create keybinds based on your screenshot
AddKeybind("held", "Jump Boost", "Space")
AddKeybind("toggle", "NoClip", "N")
AddKeybind("press", "Reset Character", "R")

-- Function to flash keybind with green color
local function flashKeybind(keyCode, duration)
    for _, keybind in ipairs(keybinds) do
        if keybind.keyCode == keyCode then
            -- Save original color
            local originalColor = keybind.label.TextColor3

            -- Flash to green
            keybind.label.TextColor3 = Color3.fromRGB(100, 255, 100) -- Bright green

            -- Return to original color after duration
            task.delay(
                duration,
                function()
                    if keybind.label and keybind.label.Parent then
                        keybind.label.TextColor3 = originalColor
                    end
                end
            )
        end
    end
end

-- Function to update keybind status
local function updateKeybindStatus(keyCode, isActive)
    for _, keybind in ipairs(keybinds) do
        if keybind.keyCode == keyCode then
            if isActive then
                keybind.label.TextColor3 = Color3.fromRGB(100, 255, 100) -- Green flash
            else
                keybind.label.TextColor3 = Color3.fromRGB(230, 230, 230) -- Normal text
            end
        end
    end
end

-- Function to handle input
local function handleInput(input, gameProcessed)
    if gameProcessed then
        return
    end

    for _, keybind in ipairs(keybinds) do
        if input.KeyCode == keybind.keyCode then
            if keybind.mode == "held" then
                if input.UserInputState == Enum.UserInputState.Begin then
                    updateKeybindStatus(keybind.keyCode, true)
                elseif input.UserInputState == Enum.UserInputState.End then
                    updateKeybindStatus(keybind.keyCode, false)
                end
            elseif keybind.mode == "toggle" then
                if input.UserInputState == Enum.UserInputState.Begin then
                    local isActive = not (keybind.label.TextColor3 == Color3.fromRGB(100, 255, 100))
                    updateKeybindStatus(keybind.keyCode, isActive)
                    if isActive then
                        flashKeybind(keybind.keyCode, 0.3)
                    end
                end
            elseif keybind.mode == "press" then
                if input.UserInputState == Enum.UserInputState.Begin then
                    flashKeybind(keybind.keyCode, 0.3)
                end
            end
        end
    end
end

UserInputService.InputBegan:Connect(handleInput)
UserInputService.InputEnded:Connect(handleInput)

-- Make keybinds draggable
local dragging, dragInput, startPos, startInputPos
KeybindFrame.InputBegan:Connect(
    function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            startPos = KeybindFrame.Position
            startInputPos = input.Position

            input.Changed:Connect(
                function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end
            )
        end
    end
)

KeybindFrame.InputChanged:Connect(
    function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end
)

UserInputService.InputChanged:Connect(
    function(input)
        if dragging and input == dragInput then
            local delta = input.Position - startInputPos
            KeybindFrame.Position =
                UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end
)

-- Notification System
local function showNotification(title, message, duration, notifType)
    duration = duration or 3
    notifType = notifType or "info"

    local colorMap = {
        info = Color3.fromRGB(0, 120, 215),
        success = Color3.fromRGB(46, 204, 113),
        warning = Color3.fromRGB(241, 196, 15),
        error = Color3.fromRGB(231, 76, 60)
    }

    local accentColor = colorMap[notifType] or colorMap.info

    local notification = Instance.new("Frame")
    notification.Parent = ScreenGui
    notification.Size = UDim2.new(0, 280, 0, 70)
    notification.Position = UDim2.new(1, 0, 0.8, 0)
    notification.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    notification.BackgroundTransparency = 0.1
    addCorner(notification, 6)
    addStroke(notification)

    local accentBar = Instance.new("Frame")
    accentBar.Parent = notification
    accentBar.Size = UDim2.new(0, 4, 1, 0)
    accentBar.Position = UDim2.new(0, 0, 0, 0)
    accentBar.BackgroundColor3 = accentColor
    addCorner(accentBar, 2)

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Parent = notification
    titleLabel.Size = UDim2.new(1, -15, 0, 18)
    titleLabel.Position = UDim2.new(0, 12, 0, 8)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 13
    titleLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left

    local messageLabel = Instance.new("TextLabel")
    messageLabel.Parent = notification
    messageLabel.Size = UDim2.new(1, -15, 0, 35)
    messageLabel.Position = UDim2.new(0, 12, 0, 25)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextSize = 11
    messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextWrapped = true

    TweenService:Create(
        notification,
        TweenInfo.new(0.3),
        {
            Position = UDim2.new(1, -295, 0.8, 0)
        }
    ):Play()

    task.delay(
        duration,
        function()
            if notification and notification.Parent then
                TweenService:Create(
                    notification,
                    TweenInfo.new(0.3),
                    {
                        Position = UDim2.new(1, 0, 0.8, 0)
                    }
                ):Play()
                task.delay(
                    0.3,
                    function()
                        if notification and notification.Parent then
                            notification:Destroy()
                        end
                    end
                )
            end
        end
    )

    return notification
end

-- BLUR EFFECT SETUP
local blur = Lighting:FindFirstChild("ModernUIBlur")
if not blur then
    blur = Instance.new("BlurEffect")
    blur.Name = "ModernUIBlur"
    blur.Size = 0
    blur.Parent = Lighting
    if not blur.Parent then
        warn("Warning: Blur effect failed to parent to Lighting. UI may appear without blur.")
    end
end

local function setBlur(enable)
    if debounceCheck("setBlur", 0.1) then
        return
    end
    if not blur or not blur.Parent then
        return
    end
    local target = enable and 20 or 0
    TweenService:Create(
        blur,
        TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {
            Size = target
        }
    ):Play()
end

-- ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ModernUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = PlayerGui

-- Main container
local MainContainer = Instance.new("Frame")
MainContainer.Name = "MainContainer"
MainContainer.Parent = ScreenGui
MainContainer.Size = UDim2.new(1, 0, 1, 0)
MainContainer.BackgroundTransparency = 1
MainContainer.Position = UDim2.new(0, 0, 1, 0)

TweenService:Create(
    MainContainer,
    TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    {
        Position = UDim2.new(0, 0, 0, 0)
    }
):Play()

-- Show welcome notification
task.delay(
    0.5,
    function()
        showNotification("Modern UI", "Press TAB to toggle UI | INSERT to hide panels", 4, "info")
    end
)

-- Top NavBar (smaller and more compact)
local NavBar = Instance.new("Frame")
NavBar.Name = "NavBar"
NavBar.Parent = MainContainer
NavBar.Size = UDim2.new(0, 650, 0, 40)
NavBar.Position = UDim2.new(0.5, -325, 0.02, 0)
NavBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
NavBar.BackgroundTransparency = 0.1
NavBar.BorderSizePixel = 0
addCorner(NavBar, 10)
addStroke(NavBar, Color3.fromRGB(80, 80, 80), 1)

-- Tabs and Player Info
local navButtons = {
    {Name = "Aimbot", Icon = "rbxassetid://6031071053"},
    {Name = "Visuals", Icon = "rbxassetid://6031094670"},
    {Name = "Misc", Icon = "rbxassetid://6031091004"},
    {Name = "Other", Icon = "rbxassetid://6031094679"},
    {Name = "Settings", Icon = "rbxassetid://6031091001"}
}

-- Create a container for the tabs
local TabsContainer = Instance.new("Frame")
TabsContainer.Name = "TabsContainer"
TabsContainer.Parent = NavBar
TabsContainer.Size = UDim2.new(0, 420, 1, 0)
TabsContainer.Position = UDim2.new(0, 10, 0, 0)
TabsContainer.BackgroundTransparency = 1

local tabsLayout = Instance.new("UIListLayout")
tabsLayout.Parent = TabsContainer
tabsLayout.FillDirection = Enum.FillDirection.Horizontal
tabsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
tabsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
tabsLayout.Padding = UDim.new(0, 6)
tabsLayout.SortOrder = Enum.SortOrder.LayoutOrder

-- Panels container
local PanelsContainer = Instance.new("Frame")
PanelsContainer.Name = "PanelsContainer"
PanelsContainer.Parent = MainContainer
PanelsContainer.Size = UDim2.new(0, WIDTH_MAIN, 0, HEIGHT)
PanelsContainer.Position = UDim2.new(0.5, -WIDTH_MAIN / 2, 0.25, 0)
PanelsContainer.BackgroundTransparency = 1
PanelsContainer.Visible = true

-- Create main panels
local Panels = {}
for _, info in ipairs(navButtons) do
    local panel = Instance.new("Frame")
    panel.Name = info.Name .. "Panel"
    panel.Parent = PanelsContainer
    panel.Size = UDim2.new(0, WIDTH_MAIN, 0, HEIGHT)
    panel.Position = UDim2.new(0, 0, 0, 0)
    panel.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    panel.BackgroundTransparency = 0.05
    addCorner(panel, 8)
    panel.Visible = (info.Name == "Aimbot")

    local header = Instance.new("TextLabel")
    header.Name = "Header"
    header.Parent = panel
    header.Size = UDim2.new(1, -10, 0, 35)
    header.Position = UDim2.new(0, 5, 0, 0)
    header.BackgroundTransparency = 1
    header.Font = Enum.Font.GothamMedium
    header.TextSize = 16
    header.TextColor3 = Color3.fromRGB(230, 230, 230)
    header.Text = info.Name

    Panels[info.Name] = panel
end

-- SidePanel
local SidePanel = Instance.new("Frame")
SidePanel.Name = "SidePanel"
SidePanel.Parent = PanelsContainer
SidePanel.Size = UDim2.new(0, WIDTH_SIDE, 0, HEIGHT)
SidePanel.Position = UDim2.new(0, WIDTH_MAIN + GAP, 0, 0)
SidePanel.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
SidePanel.BackgroundTransparency = 0.05
addCorner(SidePanel, 8)
SidePanel.Visible = false

local SideHeader = Instance.new("Frame")
SideHeader.Parent = SidePanel
SideHeader.Size = UDim2.new(1, 0, 0, 35)
SideHeader.BackgroundTransparency = 1

local SideHeaderLabel = Instance.new("TextLabel")
SideHeaderLabel.Parent = SideHeader
SideHeaderLabel.Size = UDim2.new(1, -15, 1, 0)
SideHeaderLabel.Position = UDim2.new(0, 8, 0, 0)
SideHeaderLabel.BackgroundTransparency = 1
SideHeaderLabel.Font = Enum.Font.GothamMedium
SideHeaderLabel.TextSize = 14
SideHeaderLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
SideHeaderLabel.Text = "3D Preview"

local PreviewBox = Instance.new("Frame")
PreviewBox.Parent = SidePanel
PreviewBox.Size = UDim2.new(1, -15, 1, -55)
PreviewBox.Position = UDim2.new(0, 8, 0, 45)
PreviewBox.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
addCorner(PreviewBox, 6)

-- Hamburger menu functions
local hamburgerButton = nil
local dropdownFrame = nil

local function destroyDropdown()
    if dropdownFrame and dropdownFrame.Parent then
        dropdownFrame:Destroy()
    end
    dropdownFrame = nil
end

local function removeHamburger()
    if hamburgerButton and hamburgerButton.Parent then
        hamburgerButton:Destroy()
    end
    hamburgerButton = nil
    destroyDropdown()
end

local function addHamburgerMenu()
    if not SidePanel or not SidePanel.Parent then
        return
    end
    removeHamburger()
    SidePanel.Visible = true

    hamburgerButton = Instance.new("Frame")
    hamburgerButton.Name = "HamburgerButton"
    hamburgerButton.Parent = SideHeader
    hamburgerButton.Size = UDim2.new(0, 25, 0, 20)
    hamburgerButton.Position = UDim2.new(1, -35, 0.5, -10)
    hamburgerButton.BackgroundTransparency = 1

    for i = 0, 2 do
        local line = Instance.new("Frame")
        line.Parent = hamburgerButton
        line.Size = UDim2.new(1, 0, 0, 2)
        line.Position = UDim2.new(0, 0, 0, i * 6)
        line.BackgroundColor3 = Color3.fromRGB(230, 230, 230)
        addCorner(line, 1)
    end

    local click = Instance.new("TextButton")
    click.Parent = hamburgerButton
    click.Size = UDim2.new(1, 0, 1, 0)
    click.BackgroundTransparency = 1
    click.Text = ""
    click.AutoButtonColor = false

    click.MouseButton1Click:Connect(
        function()
            if dropdownFrame and dropdownFrame.Parent then
                destroyDropdown()
                return
            end
            if not SidePanel then
                return
            end
            dropdownFrame = Instance.new("Frame")
            dropdownFrame.Name = "HamburgerDropdown"
            dropdownFrame.Parent = SidePanel
            dropdownFrame.Size = UDim2.new(0, 120, 0, 0)
            dropdownFrame.Position = UDim2.new(1, -130, 0, 35)
            dropdownFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
            addCorner(dropdownFrame, 6)
            dropdownFrame.ClipsDescendants = true

            local opt = Instance.new("TextLabel")
            opt.Parent = dropdownFrame
            opt.Size = UDim2.new(1, -8, 0, 25)
            opt.Position = UDim2.new(0, 4, 0, 4)
            opt.BackgroundTransparency = 1
            opt.Text = "Preview Option"
            opt.Font = Enum.Font.GothamMedium
            opt.TextSize = 12
            opt.TextColor3 = Color3.fromRGB(230, 230, 230)
            opt.TextXAlignment = Enum.TextXAlignment.Left

            TweenService:Create(
                dropdownFrame,
                TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {
                    Size = UDim2.new(0, 120, 0, 90)
                }
            ):Play()
        end
    )
end

local function clearPreview()
    removeHamburger()
    SidePanel.Visible = false
end

local function updatePanelsContainer()
    if debounceCheck("updatePanelsContainer", 0.1) then
        return
    end

    local targetWidth = WIDTH_MAIN
    if SidePanel.Visible then
        targetWidth = targetWidth + WIDTH_SIDE + GAP
    end
    local targetSize = UDim2.new(0, targetWidth, 0, HEIGHT)
    local targetPos = UDim2.new(0.5, -targetWidth / 2, 0.25, 0)
    TweenService:Create(
        PanelsContainer,
        TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {
            Size = targetSize,
            Position = targetPos
        }
    ):Play()
end

-- Active tab sizes (smaller)
local SIZE_NORMAL = UDim2.new(0, 75, 0, 32)
local SIZE_HOVER = UDim2.new(0, 80, 0, 35)
local SIZE_ACTIVE = UDim2.new(0, 100, 0, 38)
local SIZE_ACTIVE_HOVER = UDim2.new(0, 105, 0, 40)

local SIZE_NORMAL_SETTINGS = UDim2.new(0, 90, 0, 32)
local SIZE_HOVER_SETTINGS = UDim2.new(0, 95, 0, 35)
local SIZE_ACTIVE_SETTINGS = UDim2.new(0, 110, 0, 38)
local SIZE_ACTIVE_HOVER_SETTINGS = UDim2.new(0, 115, 0, 40)

local activeTab = nil

-- Function to create nav buttons
local function createNavButton(info, index)
    local isSettings = info.Name == "Settings"
    local normalSize = isSettings and SIZE_NORMAL_SETTINGS or SIZE_NORMAL
    local hoverSize = isSettings and SIZE_HOVER_SETTINGS or SIZE_HOVER
    local activeSize = isSettings and SIZE_ACTIVE_SETTINGS or SIZE_ACTIVE
    local activeHoverSize = isSettings and SIZE_ACTIVE_HOVER_SETTINGS or SIZE_ACTIVE_HOVER

    local btn = Instance.new("TextButton")
    btn.Name = info.Name .. "Btn"
    btn.Parent = TabsContainer
    btn.Size = normalSize
    btn.LayoutOrder = index
    btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    btn.BackgroundTransparency = 0.2
    btn.AutoButtonColor = false
    btn.Text = ""
    addCorner(btn, 6)

    local icon = Instance.new("ImageLabel")
    icon.Parent = btn
    icon.BackgroundTransparency = 1
    icon.Image = info.Icon
    icon.Size = UDim2.new(0, 15, 0, 15)
    icon.Position = UDim2.new(0, 8, 0.5, -7.5)

    local label = Instance.new("TextLabel")
    label.Parent = btn
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, -30, 1, 0)
    label.Position = UDim2.new(0, 28, 0, 0)
    label.Font = Enum.Font.GothamMedium
    label.TextSize = 12
    label.TextColor3 = Color3.fromRGB(230, 230, 230)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Text = info.Name

    -- Hover effects
    safeConnect(
        btn.MouseEnter,
        function()
            local target = (activeTab == btn) and activeHoverSize or hoverSize
            TweenService:Create(btn, TweenInfo.new(0.12), {Size = target}):Play()
        end
    )

    safeConnect(
        btn.MouseLeave,
        function()
            local target = (activeTab == btn) and activeSize or normalSize
            TweenService:Create(btn, TweenInfo.new(0.12), {Size = target}):Play()
        end
    )

    -- Click handling
    safeConnect(
        btn.MouseButton1Click,
        function()
            if debounceCheck("tabClick", 0.2) then
                return
            end

            if activeTab == btn then
                TweenService:Create(btn, TweenInfo.new(0.18), {Size = normalSize}):Play()
                activeTab = nil
                for _, p in pairs(Panels) do
                    if p.Visible then
                        TweenService:Create(p, TweenInfo.new(0.22), {BackgroundTransparency = 1}):Play()
                        task.delay(
                            0.22,
                            function()
                                if p and p.Parent then
                                    p.Visible = false
                                end
                            end
                        )
                    end
                end
                clearPreview()
                updatePanelsContainer()
                showNotification("UI", "All panels closed", 2, "info")
                return
            end

            if activeTab then
                TweenService:Create(activeTab, TweenInfo.new(0.18), {Size = normalSize}):Play()
            end

            for _, p in pairs(Panels) do
                if p.Visible then
                    TweenService:Create(p, TweenInfo.new(0.18), {BackgroundTransparency = 1}):Play()
                    task.delay(
                        0.18,
                        function()
                            if p and p.Parent then
                                p.Visible = false
                            end
                        end
                    )
                end
            end

            local target = Panels[info.Name]
            if target and target.Parent then
                target.Visible = true
                target.BackgroundTransparency = 1
                TweenService:Create(target, TweenInfo.new(0.22), {BackgroundTransparency = 0.05}):Play()
                TweenService:Create(btn, TweenInfo.new(0.18), {Size = activeSize}):Play()
                activeTab = btn

                clearPreview()
                if info.Name == "Visuals" then
                    SidePanel.Visible = true
                    SidePanel.BackgroundTransparency = 1
                    TweenService:Create(SidePanel, TweenInfo.new(0.22), {BackgroundTransparency = 0.05}):Play()
                    addHamburgerMenu()
                else
                    if SidePanel.Visible then
                        TweenService:Create(SidePanel, TweenInfo.new(0.18), {BackgroundTransparency = 1}):Play()
                        task.delay(
                            0.18,
                            function()
                                if SidePanel and SidePanel.Parent then
                                    SidePanel.Visible = false
                                end
                            end
                        )
                    end
                end

                updatePanelsContainer()
                showNotification("Tab", "Opened " .. info.Name .. " panel", 2, "success")
            end
        end
    )

    return btn
end

-- Add nav buttons and player info
local function addPlayerInfo()
    local avatarSize = 22
    local infoFrame = Instance.new("Frame")
    infoFrame.Name = "PlayerInfo"
    infoFrame.Parent = NavBar
    infoFrame.BackgroundTransparency = 1
    infoFrame.Size = UDim2.new(0, avatarSize + 80, 0, 32)
    infoFrame.Position = UDim2.new(1, -100, 0.5, -16)

    local avatar = Instance.new("ImageLabel")
    avatar.Name = "PlayerAvatar"
    avatar.Parent = infoFrame
    avatar.Size = UDim2.new(0, avatarSize, 0, avatarSize)
    avatar.Position = UDim2.new(0, 4, 0.5, -avatarSize / 2)
    avatar.BackgroundTransparency = 1
    avatar.ScaleType = Enum.ScaleType.Fit
    avatar.ClipsDescendants = true
    addCorner(avatar, 5)

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "PlayerName"
    nameLabel.Parent = infoFrame
    nameLabel.BackgroundTransparency = 1
    nameLabel.Size = UDim2.new(0, 60, 0, avatarSize)
    nameLabel.Position = UDim2.new(0, avatarSize + 8, 0.5, -avatarSize / 2)
    nameLabel.Font = Enum.Font.GothamMedium
    nameLabel.TextSize = 12
    nameLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.TextTruncate = Enum.TextTruncate.AtEnd

    local function updatePlayerInfo()
        nameLabel.Text = Player.Name
        avatar.Image = "rbxthumb://type=AvatarHeadShot&id=" .. Player.UserId .. "&w=48&h=48"
        local textWidth = math.clamp(nameLabel.TextBounds.X, 40, 60)
        nameLabel.Size = UDim2.new(0, textWidth, 0, avatarSize)
    end

    updatePlayerInfo()
    Player:GetPropertyChangedSignal("Name"):Connect(updatePlayerInfo)
    task.spawn(
        function()
            while wait(10) do
                if infoFrame and infoFrame.Parent then
                    updatePlayerInfo()
                else
                    break
                end
            end
        end
    )
end

for i, info in ipairs(navButtons) do
    createNavButton(info, i)
end
addPlayerInfo()

-- TAB / INSERT toggles
local guiVisible = true
local panelsVisible = true

setBlur(true)

safeConnect(
    UserInputService.InputBegan,
    function(input, gpe)
        if gpe then
            return
        end
        if input.KeyCode == Enum.KeyCode.Tab then
            if debounceCheck("tabToggle", 0.3) then
                return
            end

            guiVisible = not guiVisible
            local targetPos = guiVisible and UDim2.new(0, 0, 0, 0) or UDim2.new(0, 0, 1, 0)
            TweenService:Create(MainContainer, TweenInfo.new(0.3), {Position = targetPos}):Play()
            setBlur(guiVisible)
            showNotification("UI", guiVisible and "UI shown" or "UI hidden", 2, "info")
        end
        if input.KeyCode == Enum.KeyCode.Insert then
            if debounceCheck("insertToggle", 0.3) then
                return
            end

            panelsVisible = not panelsVisible
            if panelsVisible then
                NavBar.Visible = true
                PanelsContainer.Visible = true
                TweenService:Create(NavBar, TweenInfo.new(0.25), {BackgroundTransparency = 0.1}):Play()
                for _, p in pairs(Panels) do
                    if p.Visible then
                        p.BackgroundTransparency = 1
                        TweenService:Create(p, TweenInfo.new(0.25), {BackgroundTransparency = 0.05}):Play()
                    end
                end
                if SidePanel.Visible then
                    SidePanel.BackgroundTransparency = 1
                    TweenService:Create(SidePanel, TweenInfo.new(0.25), {BackgroundTransparency = 0.05}):Play()
                end
                updatePanelsContainer()
                setBlur(true)
                showNotification("Panels", "Panels shown", 2, "success")
            else
                TweenService:Create(NavBar, TweenInfo.new(0.25), {BackgroundTransparency = 1}):Play()
                for _, p in pairs(Panels) do
                    if p.Visible then
                        TweenService:Create(p, TweenInfo.new(0.25), {BackgroundTransparency = 1}):Play()
                    end
                end
                if SidePanel.Visible then
                    TweenService:Create(SidePanel, TweenInfo.new(0.25), {BackgroundTransparency = 1}):Play()
                end
                task.delay(
                    0.26,
                    function()
                        if not panelsVisible then
                            NavBar.Visible = false
                            PanelsContainer.Visible = false
                            setBlur(false)
                            showNotification("Panels", "Panels hidden", 2, "info")
                        end
                    end
                )
            end
        end
    end
)

-- Player death resets blur
safeConnect(
    Player.CharacterAdded,
    function()
        setBlur(false)
    end
)

-- Cleanup on player leaving
safeConnect(
    Player.AncestryChanged,
    function()
        if not Player.Parent then
            cleanup()
        end
    end
)

-- Smooth draggable PanelsContainer
local dragging, dragInput, startMousePos, startFramePos = false, nil, nil, nil

local function updatePosition()
    if not dragging or not startMousePos or not startFramePos then
        return
    end
    local mousePos = UserInputService:GetMouseLocation()
    local delta = Vector2.new(mousePos.X - startMousePos.X, mousePos.Y - startMousePos.Y)
    PanelsContainer.Position = UDim2.new(0, startFramePos.X.Offset + delta.X, 0, startFramePos.Y.Offset + delta.Y)
end

for _, panel in pairs(Panels) do
    local header = panel:FindFirstChild("Header")
    if header then
        safeConnect(
            header.InputBegan,
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    startMousePos = UserInputService:GetMouseLocation()
                    startFramePos =
                        UDim2.new(0, PanelsContainer.AbsolutePosition.X, 0, PanelsContainer.AbsolutePosition.Y)
                    input.Changed:Connect(
                        function()
                            if input.UserInputState == Enum.UserInputState.End then
                                dragging = false
                                showNotification("UI", "Panel position updated", 1.5, "success")
                            end
                        end
                    )
                end
            end
        )

        safeConnect(
            header.InputChanged,
            function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    dragInput = input
                end
            end
        )
    end
end

safeConnect(
    UserInputService.InputChanged,
    function(input)
        if dragging and input == dragInput then
            updatePosition()
        end
    end
)
