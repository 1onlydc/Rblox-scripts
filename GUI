
-- Modern Roblox UI with Watermark, Status Bar, Animated Background, and Tooltips
-- Place in a LocalScript (StarterPlayerScripts / StarterGui etc.)

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local InsertService = game:GetService("InsertService")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Constants for layout
local WIDTH_MAIN = 600
local WIDTH_SIDE = 220
local GAP = 15
local HEIGHT = 400

-- Performance optimizations
local debounce = {}
local connections = {}

local function debounceCheck(id, cooldown)
    cooldown = cooldown or 0.5
    if debounce[id] and (os.clock() - debounce[id]) < cooldown then
        return true
    end
    debounce[id] = os.clock()
    return false
end

local function safeConnect(event, callback)
    local connection = event:Connect(callback)
    table.insert(connections, connection)
    return connection
end

local function cleanup()
    for _, connection in ipairs(connections) do
        connection:Disconnect()
    end
    if blur and blur.Parent then blur:Destroy() end
    if ScreenGui and ScreenGui.Parent then ScreenGui:Destroy() end
    if WatermarkGui and WatermarkGui.Parent then WatermarkGui:Destroy() end
    if StatusGui and StatusGui.Parent then StatusGui:Destroy() end
    if KeybindsGui and KeybindsGui.Parent then KeybindsGui:Destroy() end
end

-- Utility helpers
local function addCorner(obj, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = UDim.new(0, radius or 6)
    c.Parent = obj
    return c
end

local function addStroke(obj, color, thickness)
    local s = Instance.new("UIStroke")
    s.Thickness = thickness or 1
    s.Color = color or Color3.fromRGB(60, 60, 60)
    s.Transparency = 0.2
    s.Parent = obj
    return s
end

local function addGradient(obj, color1, color2, rotation)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new(color1, color2)
    gradient.Rotation = rotation or 90
    gradient.Parent = obj
    return gradient
end

-- Create Watermark
local WatermarkGui = Instance.new("ScreenGui")
WatermarkGui.Name = "WatermarkClock"
WatermarkGui.ResetOnSpawn = false
WatermarkGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
WatermarkGui.Parent = PlayerGui

local Watermark = Instance.new("Frame")
Watermark.Name = "Watermark"
Watermark.Parent = WatermarkGui
Watermark.Size = UDim2.new(0, 200, 0, 24)
Watermark.Position = UDim2.new(0, 8, 0, 8)
Watermark.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Watermark.BackgroundTransparency = 0.05
addCorner(Watermark, 6)
addStroke(Watermark, Color3.fromRGB(80, 80, 80), 1)
addGradient(Watermark, Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15), 90)

local UsernameLabel = Instance.new("TextLabel")
UsernameLabel.Parent = Watermark
UsernameLabel.Size = UDim2.new(0.5, -5, 1, 0)
UsernameLabel.Position = UDim2.new(0, 5, 0, 0)
UsernameLabel.BackgroundTransparency = 1
UsernameLabel.Font = Enum.Font.GothamMedium
UsernameLabel.TextSize = 12
UsernameLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
UsernameLabel.TextXAlignment = Enum.TextXAlignment.Left
UsernameLabel.Text = Player.Name

local TimeLabel = Instance.new("TextLabel")
TimeLabel.Parent = Watermark
TimeLabel.Size = UDim2.new(0.5, -5, 1, 0)
TimeLabel.Position = UDim2.new(0.5, 0, 0, 0)
TimeLabel.BackgroundTransparency = 1
TimeLabel.Font = Enum.Font.GothamMedium
TimeLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
TimeLabel.TextXAlignment = Enum.TextXAlignment.Right
TimeLabel.TextSize = 11

local function updateTime()
    local time = os.date("*t")
    local hour = string.format("%02d", time.hour)
    local min = string.format("%02d", time.min)
    local sec = string.format("%02d", time.sec)
    local day = os.date("%A"):sub(1, 3)
    TimeLabel.Text = string.format("%s:%s:%s | %s", hour, min, sec, day)
end

spawn(function()
    while Watermark and Watermark.Parent do
        updateTime()
        UsernameLabel.Text = Player.Name
        wait(1)
    end
end)

-- Create NerdWare Status Bar
local StatusGui = Instance.new("ScreenGui")
StatusGui.Name = "NerdWareStatusBar"
StatusGui.ResetOnSpawn = false
StatusGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
StatusGui.Parent = PlayerGui

local NerdWareStatusBar = Instance.new("Frame")
NerdWareStatusBar.Name = "StatusBar"
NerdWareStatusBar.Parent = StatusGui
NerdWareStatusBar.Size = UDim2.new(0, 200, 0, 20)
NerdWareStatusBar.Position = UDim2.new(0, 8, 0, 36)
NerdWareStatusBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
NerdWareStatusBar.BackgroundTransparency = 0.05
addCorner(NerdWareStatusBar, 6)
addStroke(NerdWareStatusBar, Color3.fromRGB(80, 80, 80), 1)
addGradient(NerdWareStatusBar, Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15), 90)

local StatusText = Instance.new("TextLabel")
StatusText.Parent = NerdWareStatusBar
StatusText.Size = UDim2.new(1, -8, 1, 0)
StatusText.Position = UDim2.new(0, 4, 0, 0)
StatusText.BackgroundTransparency = 1
StatusText.Font = Enum.Font.GothamMedium
StatusText.TextSize = 12
StatusText.TextColor3 = Color3.fromRGB(230, 230, 230)
StatusText.TextXAlignment = Enum.TextXAlignment.Left
StatusText.Text = "FPS: -- | NerdWare"

local function updateBarSize()
    local padding = 10
    local textWidth = StatusText.TextBounds.X
    NerdWareStatusBar.Size = UDim2.new(0, textWidth + padding, 0, 20)
end

local lastFpsUpdate = 0
local fps = 60
RunService.Heartbeat:Connect(function(dt)
    fps = 1 / dt
    if os.clock() - lastFpsUpdate >= 0.5 then
        StatusText.Text = string.format("FPS: %.0f | NerdWare", fps)
        updateBarSize()
        lastFpsUpdate = os.clock()
    end
end)

-- Keybinds GUI
local KeybindsGui = Instance.new("ScreenGui")
KeybindsGui.Name = "KeybindsUI"
KeybindsGui.ResetOnSpawn = false
KeybindsGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
KeybindsGui.Parent = PlayerGui

local KeybindFrame = Instance.new("Frame")
KeybindFrame.Name = "KeybindList"
KeybindFrame.Parent = KeybindsGui
KeybindFrame.Size = UDim2.new(0, 200, 0, 110)
KeybindFrame.AnchorPoint = Vector2.new(0, 0.5)
KeybindFrame.Position = UDim2.new(0, 8, 0.5, 0)
KeybindFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
KeybindFrame.BackgroundTransparency = 0.05
addCorner(KeybindFrame, 6)
addStroke(KeybindFrame, Color3.fromRGB(80, 80, 80), 1)
addGradient(KeybindFrame, Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15), 90)

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Parent = KeybindFrame
Title.Size = UDim2.new(1, -10, 0, 20)
Title.Position = UDim2.new(0, 5, 0, 2)
Title.BackgroundTransparency = 1
Title.Text = "Keybinds"
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Font = Enum.Font.GothamMedium
Title.TextSize = 14
Title.TextColor3 = Color3.fromRGB(230, 230, 230)

local Content = Instance.new("Frame")
Content.Name = "Content"
Content.Parent = KeybindFrame
Content.Position = UDim2.new(0, 5, 0, 25)
Content.Size = UDim2.new(1, -10, 1, -30)
Content.BackgroundTransparency = 1

local padding = Instance.new("UIPadding")
padding.PaddingLeft = UDim.new(0, 5)
padding.PaddingRight = UDim.new(0, 5)
padding.Parent = Content

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = Content
UIListLayout.Padding = UDim.new(0, 4)
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

local keybinds = {}

local function AddKeybind(mode, name, key)
    local KeyLabel = Instance.new("TextLabel")
    KeyLabel.Parent = Content
    KeyLabel.Size = UDim2.new(1, 0, 0, 18)
    KeyLabel.BackgroundTransparency = 1
    KeyLabel.TextXAlignment = Enum.TextXAlignment.Left
    KeyLabel.Font = Enum.Font.GothamMedium
    KeyLabel.TextSize = 12
    KeyLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
    KeyLabel.Text = "(" .. mode .. ") " .. name .. " - " .. key

    table.insert(keybinds, {
        label = KeyLabel,
        keyCode = Enum.KeyCode[key],
        mode = mode:lower()
    })

    return KeyLabel
end

AddKeybind("held", "Jump Boost", "Space")
AddKeybind("toggle", "NoClip", "N")
AddKeybind("press", "Reset Character", "R")

local function flashKeybind(keyCode, duration)
    for _, keybind in ipairs(keybinds) do
        if keybind.keyCode == keyCode then
            local originalColor = keybind.label.TextColor3
            keybind.label.TextColor3 = Color3.fromRGB(100, 255, 100)
            task.delay(duration, function()
                if keybind.label and keybind.label.Parent then
                    keybind.label.TextColor3 = originalColor
                end
            end)
        end
    end
end

local function updateKeybindStatus(keyCode, isActive)
    for _, keybind in ipairs(keybinds) do
        if keybind.keyCode == keyCode then
            keybind.label.TextColor3 = isActive and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(230, 230, 230)
        end
    end
end

local function handleInput(input, gameProcessed)
    if gameProcessed then return end
    for _, keybind in ipairs(keybinds) do
        if input.KeyCode == keybind.keyCode then
            if keybind.mode == "held" then
                if input.UserInputState == Enum.UserInputState.Begin then
                    updateKeybindStatus(keybind.keyCode, true)
                elseif input.UserInputState == Enum.UserInputState.End then
                    updateKeybindStatus(keybind.keyCode, false)
                end
            elseif keybind.mode == "toggle" then
                if input.UserInputState == Enum.UserInputState.Begin then
                    local isActive = not (keybind.label.TextColor3 == Color3.fromRGB(100, 255, 100))
                    updateKeybindStatus(keybind.keyCode, isActive)
                    if isActive then flashKeybind(keybind.keyCode, 0.3) end
                end
            elseif keybind.mode == "press" then
                if input.UserInputState == Enum.UserInputState.Begin then
                    flashKeybind(keybind.keyCode, 0.3)
                end
            end
        end
    end
end

UserInputService.InputBegan:Connect(handleInput)
UserInputService.InputEnded:Connect(handleInput)

local dragging, dragInput, startPos, startInputPos
KeybindFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        startPos = KeybindFrame.Position
        startInputPos = input.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)

KeybindFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        local delta = input.Position - startInputPos
        KeybindFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Notification System
local function showNotification(title, message, duration, notifType)
    duration = duration or 3
    notifType = notifType or "info"
    local colorMap = {
        info = Color3.fromRGB(0, 120, 215),
        success = Color3.fromRGB(46, 204, 113),
        warning = Color3.fromRGB(241, 196, 15),
        error = Color3.fromRGB(231, 76, 60)
    }
    local accentColor = colorMap[notifType] or colorMap.info

    local notification = Instance.new("Frame")
    notification.Parent = ScreenGui
    notification.Size = UDim2.new(0, 280, 0, 70)
    notification.Position = UDim2.new(1, 0, 0.8, 0)
    notification.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    notification.BackgroundTransparency = 0.1
    addCorner(notification, 6)
    addStroke(notification, Color3.fromRGB(80, 80, 80), 1)
    addGradient(notification, Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15), 90)

    local accentBar = Instance.new("Frame")
    accentBar.Parent = notification
    accentBar.Size = UDim2.new(0, 4, 1, 0)
    accentBar.Position = UDim2.new(0, 0, 0, 0)
    accentBar.BackgroundColor3 = accentColor
    addCorner(accentBar, 2)

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Parent = notification
    titleLabel.Size = UDim2.new(1, -15, 0, 18)
    titleLabel.Position = UDim2.new(0, 12, 0, 8)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 13
    titleLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left

    local messageLabel = Instance.new("TextLabel")
    messageLabel.Parent = notification
    messageLabel.Size = UDim2.new(1, -15, 0, 35)
    messageLabel.Position = UDim2.new(0, 12, 0, 25)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextSize = 11
    messageLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextWrapped = true

    TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        Position = UDim2.new(1, -295, 0.8, 0)
    }):Play()

    task.delay(duration, function()
        if notification and notification.Parent then
            TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
                Position = UDim2.new(1, 0, 0.8, 0)
            }):Play()
            task.delay(0.3, function()
                if notification and notification.Parent then notification:Destroy() end
            end)
        end
    end)

    return notification
end

-- Blur Effect
local blur = Lighting:FindFirstChild("ModernUIBlur")
if not blur then
    blur = Instance.new("BlurEffect")
    blur.Name = "ModernUIBlur"
    blur.Size = 0
    blur.Parent = Lighting
end

local function setBlur(enable)
    if debounceCheck("setBlur", 0.1) then return end
    if not blur or not blur.Parent then return end
    local target = enable and 20 or 0
    TweenService:Create(blur, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = target}):Play()
end

-- ScreenGui and Main Container
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ModernUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = PlayerGui

local MainContainer = Instance.new("Frame")
MainContainer.Name = "MainContainer"
MainContainer.Parent = ScreenGui
MainContainer.Size = UDim2.new(1, 0, 1, 0)
MainContainer.BackgroundTransparency = 1
MainContainer.Position = UDim2.new(0, 0, 1, 0)

TweenService:Create(MainContainer, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
    Position = UDim2.new(0, 0, 0, 0)
}):Play()

task.delay(0.5, function()
    showNotification("Modern UI", "Press TAB to toggle UI | INSERT to hide panels", 4, "info")
end)

-- Animated Background Particles
local Particles = Instance.new("Frame")
Particles.Name = "Particles"
Particles.Parent = MainContainer
Particles.Size = UDim2.new(1, 0, 1, 0)
Particles.BackgroundTransparency = 1
Particles.ZIndex = 0

local currentTheme = "Default"
local themes = {
    Default = {
        color1 = Color3.fromRGB(80, 80, 80),
        color2 = Color3.new(1, 1, 1),
        shape = "Circle",
        speed = 1,
        texture = nil,
        spawnRate = 0.05,
        maxParticles = 50
    },
    NeonGlow = {
        color1 = Color3.fromRGB(0, 255, 255),
        color2 = Color3.fromRGB(255, 0, 255),
        shape = "Glow",
        speed = 1.5,
        texture = "rbxassetid://241650934",
        spawnRate = 0.08,
        maxParticles = 40
    },
    Starfield = {
        color1 = Color3.fromRGB(255, 215, 0),
        color2 = Color3.new(1, 1, 1),
        shape = "Star",
        speed = 1.2,
        texture = "rbxassetid://6031094679",
        spawnRate = 0.1,
        maxParticles = 60
    },
    Fire = {
        color1 = Color3.fromRGB(255, 100, 0),
        color2 = Color3.new(0, 0, 0),
        shape = "Flame",
        speed = 0.8,
        texture = nil,
        spawnRate = 0.06,
        maxParticles = 45
    },
    Snow = {
        color1 = Color3.fromRGB(255, 255, 255),
        color2 = Color3.fromRGB(200, 220, 255),
        shape = "Snowflake",
        speed = 0.6,
        texture = "rbxassetid://360397920",
        spawnRate = 0.04,
        maxParticles = 70
    }
}

local particlePool = {}
local activeParticles = {}
local poolSize = 70

for i = 1, poolSize do
    local particle = Instance.new("ImageLabel")
    particle.Size = UDim2.new(0, 5, 0, 5)
    particle.Position = UDim2.new(0, 0, 0, 0)
    particle.BackgroundTransparency = 1
    particle.ImageTransparency = 1
    particle.ZIndex = 1
    particle.Parent = Particles
    particle.Visible = false
    addCorner(particle, 50)
    table.insert(particlePool, particle)
end

local function createParticle()
    if #activeParticles >= themes[currentTheme].maxParticles then return end

    local particle = table.remove(particlePool)
    if not particle then return end

    particle.Visible = true
    particle.Position = UDim2.new(math.random(), 0, math.random(), 0)
    local theme = themes[currentTheme]
    local startSize = UDim2.new(0, math.random(3, 8), 0, math.random(3, 8))
    local endSize = UDim2.new(0, math.random(1, 3), 0, math.random(1, 3))
    local duration = (2 + math.random() * 3) / theme.speed
    local rotationSpeed = math.random(-50, 50)

    particle.Size = startSize
    particle.ImageTransparency = 0.7
    particle.Image = theme.texture or ""
    particle.BackgroundColor3 = theme.color1:Lerp(theme.color2, math.random())
    particle.ImageColor3 = theme.color1:Lerp(theme.color2, math.random())
    particle.Rotation = 0

    local endPos = theme.shape == "Snowflake" and
        UDim2.new(math.random(), 0, 1, math.random(50, 100)) or
        UDim2.new(math.random(), 0, math.random(), 0)

    local tweenInfo = TweenInfo.new(duration, theme.shape == "Snowflake" and Enum.EasingStyle.Sine or Enum.EasingStyle.Linear)
    local posTween = TweenService:Create(particle, tweenInfo, {Position = endPos})
    local sizeTween = TweenService:Create(particle, tweenInfo, {Size = endSize})
    local fadeTween = TweenService:Create(particle, tweenInfo, {ImageTransparency = 1, BackgroundTransparency = 1})
    local rotTween = TweenService:Create(particle, tweenInfo, {Rotation = rotationSpeed})

    if theme.shape == "Glow" then
        addGradient(particle, theme.color1, theme.color2, 45)
        local stroke = addStroke(particle, theme.color1, 1)
        stroke.Transparency = 0.5
    elseif theme.shape == "Flame" then
        particle.Size = UDim2.new(0, 2, 0, 6)
        endPos = UDim2.new(math.random(), 0, 0, -math.random(100, 200))
        posTween = TweenService:Create(particle, tweenInfo, {Position = endPos})
    end

    posTween:Play()
    sizeTween:Play()
    fadeTween:Play()
    rotTween:Play()

    table.insert(activeParticles, {
        particle = particle,
        tweens = {posTween, sizeTween, fadeTween, rotTween}
    })

    fadeTween.Completed:Connect(function()
        particle.Visible = false
        particle.Rotation = 0
        for _, child in ipairs(particle:GetChildren()) do
            if child:IsA("UIGradient") or child:IsA("UIStroke") then
                child:Destroy()
            end
        end
        table.remove(activeParticles, table.find(activeParticles, particle))
        table.insert(particlePool, particle)
    end)
end

local function createBurst(centerPos, count)
    for i = 1, count do
        local particle = table.remove(particlePool)
        if not particle then break end

        particle.Visible = true
        local angle = math.rad(i * 360 / count)
        local speed = math.random(50, 100)
        local startPos = centerPos
        local endPos = UDim2.new(startPos.X.Scale + math.cos(angle) * speed / 1000, 0,
                                startPos.Y.Scale + math.sin(angle) * speed / 1000, 0)
        local theme = themes[currentTheme]
        particle.Position = startPos
        particle.Size = UDim2.new(0, 4, 0, 4)
        particle.ImageTransparency = 0.7
        particle.Image = theme.texture or ""
        particle.BackgroundColor3 = theme.color1:Lerp(theme.color2, math.random())
        particle.ImageColor3 = theme.color1:Lerp(theme.color2, math.random())

        local duration = 1 + math.random() * 1
        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local posTween = TweenService:Create(particle, tweenInfo, {Position = endPos})
        local fadeTween = TweenService:Create(particle, tweenInfo, {ImageTransparency = 1, BackgroundTransparency = 1})

        posTween:Play()
        fadeTween:Play()

        table.insert(activeParticles, {
            particle = particle,
            tweens = {posTween, fadeTween}
        })

        fadeTween.Completed:Connect(function()
            particle.Visible = false
            table.remove(activeParticles, table.find(activeParticles, particle))
            table.insert(particlePool, particle)
        end)
    end
end

local function clearParticles()
    if particleLoop then particleLoop:Disconnect() end
    for _, active in ipairs(activeParticles) do
        for _, tween in ipairs(active.tweens) do
            if tween then tween:Cancel() end
        end
        active.particle.Visible = false
        for _, child in ipairs(active.particle:GetChildren()) do
            if child:IsA("UIGradient") or child:IsA("UIStroke") then
                child:Destroy()
            end
        end
        table.insert(particlePool, active.particle)
    end
    activeParticles = {}
end

local function startParticleLoop()
    particleLoop = RunService.RenderStepped:Connect(function()
        if math.random() < themes[currentTheme].spawnRate then
            createParticle()
        end
    end)
end

local function switchTheme(newTheme)
    if themes[newTheme] then
        currentTheme = newTheme
        clearParticles()
        for _ = 1, math.min(30, themes[newTheme].maxParticles) do
            createParticle()
        end
        startParticleLoop()
        showNotification("Theme", "Switched to " .. newTheme, 2, "success")
    end
end

for _ = 1, 30 do createParticle() end
startParticleLoop()

-- Welcome Watermark
local Welcome = Instance.new("Frame")
Welcome.Name = "WelcomeWatermark"
Welcome.Parent = MainContainer
Welcome.Size = UDim2.new(0, 250, 0, 24)
Welcome.Position = UDim2.new(0.5, -125, 0, 0)
Welcome.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Welcome.BackgroundTransparency = 0.05
addCorner(Welcome, 6)
addStroke(Welcome, Color3.fromRGB(80, 80, 80), 1)
addGradient(Welcome, Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15), 90)

local WelcomeLabel = Instance.new("TextLabel")
WelcomeLabel.Parent = Welcome
WelcomeLabel.Size = UDim2.new(1, -10, 1, 0)
WelcomeLabel.Position = UDim2.new(0, 5, 0, 0)
WelcomeLabel.BackgroundTransparency = 1
WelcomeLabel.Font = Enum.Font.GothamMedium
WelcomeLabel.TextSize = 12
WelcomeLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
WelcomeLabel.TextXAlignment = Enum.TextXAlignment.Center
WelcomeLabel.Text = "Welcome To NerdWare - Hope You Enjoy!"

local function updateWelcomeSize()
    local padding = 10
    local textWidth = WelcomeLabel.TextBounds.X
    Welcome.Size = UDim2.new(0, textWidth + padding, 0, 24)
    Welcome.Position = UDim2.new(0.5, -(textWidth + padding)/2, 0, 0)
end

updateWelcomeSize()

-- Top NavBar
local NavBar = Instance.new("Frame")
NavBar.Name = "NavBar"
NavBar.Parent = MainContainer
NavBar.Size = UDim2.new(0, 650, 0, 45)
NavBar.Position = UDim2.new(0.5, -325, 0.02, 35)
NavBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
NavBar.BackgroundTransparency = 0.1
NavBar.BorderSizePixel = 0
addCorner(NavBar, 10)
addStroke(NavBar, Color3.fromRGB(80, 80, 80), 1)
addGradient(NavBar, Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15), 0)

-- Tabs and Player Info
local navButtons = {
    {Name = "Aimbot", Icon = "rbxassetid://6031071053"},
    {Name = "Visuals", Icon = "rbxassetid://6031094670"},
    {Name = "Misc", Icon = "rbxassetid://6031091004"},
    {Name = "Other", Icon = "rbxassetid://6031094679"},
    {Name = "Settings", Icon = "rbxassetid://6031091001"},
}

local TabsContainer = Instance.new("Frame")
TabsContainer.Name = "TabsContainer"
TabsContainer.Parent = NavBar
TabsContainer.Size = UDim2.new(0, 400, 1, 0)
TabsContainer.Position = UDim2.new(0, 10, 0, 0)
TabsContainer.BackgroundTransparency = 1

local tabsLayout = Instance.new("UIListLayout")
tabsLayout.Parent = TabsContainer
tabsLayout.FillDirection = Enum.FillDirection.Horizontal
tabsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
tabsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
tabsLayout.Padding = UDim.new(0, 5)
tabsLayout.SortOrder = Enum.SortOrder.LayoutOrder

-- Panels Container
local PanelsContainer = Instance.new("Frame")
PanelsContainer.Name = "PanelsContainer"
PanelsContainer.Parent = MainContainer
PanelsContainer.Size = UDim2.new(0, WIDTH_MAIN + WIDTH_SIDE + GAP, 0, HEIGHT)
PanelsContainer.Position = UDim2.new(0.5, -(WIDTH_MAIN + WIDTH_SIDE + GAP)/2, 0.25, 0)
PanelsContainer.BackgroundTransparency = 1
PanelsContainer.Visible = true

-- SidePanel (Always Visible)
local SidePanel = Instance.new("Frame")
SidePanel.Name = "SidePanel"
SidePanel.Parent = PanelsContainer
SidePanel.Size = UDim2.new(0, WIDTH_SIDE, 0, HEIGHT)
SidePanel.Position = UDim2.new(0, WIDTH_MAIN + GAP, 0, 0)
SidePanel.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
SidePanel.BackgroundTransparency = 0.05
addCorner(SidePanel, 8)
addGradient(SidePanel, Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15), 90)
addStroke(SidePanel, Color3.fromRGB(80, 80, 80), 1)
SidePanel.Visible = true

local SideHeader = Instance.new("Frame")
SideHeader.Parent = SidePanel
SideHeader.Size = UDim2.new(1, 0, 0, 35)
SideHeader.BackgroundTransparency = 1

local SideHeaderLabel = Instance.new("TextLabel")
SideHeaderLabel.Parent = SideHeader
SideHeaderLabel.Size = UDim2.new(1, -15, 1, 0)
SideHeaderLabel.Position = UDim2.new(0, 8, 0, 0)
SideHeaderLabel.BackgroundTransparency = 1
SideHeaderLabel.Font = Enum.Font.GothamMedium
SideHeaderLabel.TextSize = 14
SideHeaderLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
SideHeaderLabel.Text = "Options"

local SideContent = Instance.new("ScrollingFrame")
SideContent.Name = "SideContent"
SideContent.Parent = SidePanel
SideContent.Size = UDim2.new(1, -15, 1, -55)
SideContent.Position = UDim2.new(0, 8, 0, 45)
SideContent.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
SideContent.BackgroundTransparency = 0.1
SideContent.BorderSizePixel = 0
SideContent.ScrollBarThickness = 5
SideContent.CanvasSize = UDim2.new(0, 0, 0, 0)
addCorner(SideContent, 6)
addGradient(SideContent, Color3.fromRGB(20, 20, 20), Color3.fromRGB(10, 10, 10), 90)
addStroke(SideContent, Color3.fromRGB(80, 80, 80), 1)

local SideContentLayout = Instance.new("UIListLayout")
SideContentLayout.Parent = SideContent
SideContentLayout.Padding = UDim.new(0, 5)
SideContentLayout.SortOrder = Enum.SortOrder.LayoutOrder

-- 3D Preview for Visuals Tab
local previewPart = Instance.new("Part")
previewPart.Size = Vector3.new(4, 4, 4)
previewPart.Position = Vector3.new(0, 0, 0)
previewPart.Anchored = true
previewPart.CanCollide = false
previewPart.Material = Enum.Material.Neon
previewPart.Color = Color3.fromRGB(0, 255, 255)

local ViewportFrame = Instance.new("ViewportFrame")
ViewportFrame.Name = "PreviewViewport"
ViewportFrame.Parent = SideContent
ViewportFrame.Size = UDim2.new(1, -10, 0, 200)
ViewportFrame.Position = UDim2.new(0, 5, 0, 5)
ViewportFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
ViewportFrame.BackgroundTransparency = 0.2
ViewportFrame.Visible = false
addCorner(ViewportFrame, 6)
addStroke(ViewportFrame, Color3.fromRGB(80, 80, 80), 1)

local WorldModel = Instance.new("WorldModel")
WorldModel.Parent = ViewportFrame
previewPart.Parent = WorldModel

local previewCamera = Instance.new("Camera")
previewCamera.Parent = ViewportFrame
ViewportFrame.CurrentCamera = previewCamera
previewCamera.CFrame = CFrame.new(Vector3.new(0, 0, 10), Vector3.new(0, 0, 0))

local function updatePreview()
    local t = tick()
    previewPart.CFrame = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(t * 45), math.rad(t * 30), 0)
end

RunService.RenderStepped:Connect(updatePreview)

-- Function to clear SidePanel content
local function clearSidePanel()
    for _, child in ipairs(SideContent:GetChildren()) do
        if child:IsA("Frame") or child:IsA("TextButton") or child:IsA("TextLabel") or child:IsA("ViewportFrame") then
            child.Visible = false
            child:Destroy()
        end
    end
    SideContent.CanvasSize = UDim2.new(0, 0, 0, 0)
    SideHeaderLabel.Text = "Options"
end

-- Function to populate SidePanel with options
local function populateSidePanel(title, options, callback, button)
    clearSidePanel()
    SideHeaderLabel.Text = title

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Parent = SideContent
    titleLabel.Size = UDim2.new(1, 0, 0, 25)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 14
    titleLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left

    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Parent = SideContent
        optionButton.Size = UDim2.new(1, 0, 0, 30)
        optionButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        optionButton.BackgroundTransparency = 0.2
        optionButton.Text = option
        optionButton.Font = Enum.Font.Gotham
        optionButton.TextSize = 12
        optionButton.TextColor3 = Color3.fromRGB(230, 230, 230)
        addCorner(optionButton, 4)
        addStroke(optionButton, Color3.fromRGB(80, 80, 80), 1)

        optionButton.MouseEnter:Connect(function()
            TweenService:Create(optionButton, TweenInfo.new(0.1), {
                BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            }):Play()
        end)

        optionButton.MouseLeave:Connect(function()
            TweenService:Create(optionButton, TweenInfo.new(0.1), {
                BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            }):Play()
        end)

        optionButton.MouseButton1Click:Connect(function()
            if callback then
                callback(option, i)
            end
            button.Text = title .. ": " .. option
            showNotification("Settings", title .. " set to " .. option, 2, "success")
            clearSidePanel() -- Clear SidePanel after selection
        end)
    end

    local contentHeight = 25 + (#options * 35) + 10
    SideContent.CanvasSize = UDim2.new(0, 0, 0, contentHeight)
end

-- Function to create dropdown button in main panel
local function createDropdownButton(parent, name, options, callback)
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Parent = parent
    dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
    dropdownFrame.BackgroundTransparency = 1

    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Parent = dropdownFrame
    dropdownButton.Size = UDim2.new(1, -10, 0, 35)
    dropdownButton.Position = UDim2.new(0, 5, 0, 0)
    dropdownButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    dropdownButton.BackgroundTransparency = 0.2
    dropdownButton.Text = name
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.TextSize = 13
    dropdownButton.TextColor3 = Color3.fromRGB(230, 230, 230)
    addCorner(dropdownButton, 4)
    addStroke(dropdownButton, Color3.fromRGB(80, 80, 80), 1)

    local arrow = Instance.new("ImageLabel")
    arrow.Parent = dropdownButton
    arrow.Size = UDim2.new(0, 15, 0, 15)
    arrow.Position = UDim2.new(1, -20, 0.5, -7.5)
    arrow.BackgroundTransparency = 1
    arrow.Image = "rbxassetid://6031091001"
    arrow.ImageColor3 = Color3.fromRGB(180, 180, 180)

    dropdownButton.MouseEnter:Connect(function()
        TweenService:Create(dropdownButton, TweenInfo.new(0.1), {
            BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        }):Play()
    end)

    dropdownButton.MouseLeave:Connect(function()
        TweenService:Create(dropdownButton, TweenInfo.new(0.1), {
            BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        }):Play()
    end)

    dropdownButton.MouseButton1Click:Connect(function()
        populateSidePanel(name, options, callback, dropdownButton)
    end)

    return dropdownFrame
end

-- Create panels for each tab
local Panels = {}
for _, info in ipairs(navButtons) do
    local panel = Instance.new("Frame")
    panel.Name = info.Name .. "Panel"
    panel.Parent = PanelsContainer
    panel.Size = UDim2.new(0, WIDTH_MAIN, 0, HEIGHT)
    panel.Position = UDim2.new(0, 0, 0, 0)
    panel.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    panel.BackgroundTransparency = 0.05
    addCorner(panel, 8)
    addGradient(panel, Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15), 90)
    addStroke(panel, Color3.fromRGB(80, 80, 80), 1)
    panel.Visible = (info.Name == "Aimbot")

    local header = Instance.new("TextLabel")
    header.Name = "Header"
    header.Parent = panel
    header.Size = UDim2.new(1, -10, 0, 35)
    header.Position = UDim2.new(0, 5, 0, 0)
    header.BackgroundTransparency = 1
    header.Font = Enum.Font.GothamMedium
    header.TextSize = 16
    header.TextColor3 = Color3.fromRGB(230, 230, 230)
    header.Text = info.Name

    local content = Instance.new("ScrollingFrame")
    content.Name = "Content"
    content.Parent = panel
    content.Size = UDim2.new(1, -10, 1, -45)
    content.Position = UDim2.new(0, 5, 0, 40)
    content.BackgroundTransparency = 1
    content.BorderSizePixel = 0
    content.ScrollBarThickness = 5
    content.CanvasSize = UDim2.new(0, 0, 0, 0)

    local layout = Instance.new("UIListLayout")
    layout.Parent = content
    layout.Padding = UDim.new(0, 10)
    layout.SortOrder = Enum.SortOrder.LayoutOrder

    if info.Name == "Settings" then
        createDropdownButton(content, "UI Theme", {"Dark", "Light", "Blue", "Red", "Green"}, function(option)
            print("UI Theme selected:", option)
        end)
        createDropdownButton(content, "Background Style", {"Particles", "Gradient", "Solid", "Animated"}, function(option)
            print("Background Style selected:", option)
        end)
        createDropdownButton(content, "Font Style", {"Default", "Modern", "Bold", "Light"}, function(option)
            print("Font Style selected:", option)
        end)
        createDropdownButton(content, "Animation Speed", {"Slow", "Normal", "Fast", "Instant"}, function(option)
            print("Animation Speed selected:", option)
        end)
        createDropdownButton(content, "Particle Theme", {"Default", "NeonGlow", "Starfield", "Fire", "Snow"}, function(option)
            switchTheme(option)
        end)
    end

    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        content.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
    end)

    Panels[info.Name] = panel
end

-- Active Tab Sizes
local SIZE_NORMAL = UDim2.new(0, 75, 0, 32)
local SIZE_HOVER = UDim2.new(0, 80, 0, 35)
local SIZE_ACTIVE = UDim2.new(0, 100, 0, 38)
local SIZE_ACTIVE_HOVER = UDim2.new(0, 105, 0, 40)
local SIZE_NORMAL_SETTINGS = UDim2.new(0, 90, 0, 32)
local SIZE_HOVER_SETTINGS = UDim2.new(0, 95, 0, 35)
local SIZE_ACTIVE_SETTINGS = UDim2.new(0, 110, 0, 38)
local SIZE_ACTIVE_HOVER_SETTINGS = UDim2.new(0, 115, 0, 40)

local activeTab = nil

local function createNavButton(info, index)
    local isSettings = info.Name == "Settings"
    local normalSize = isSettings and SIZE_NORMAL_SETTINGS or SIZE_NORMAL
    local hoverSize = isSettings and SIZE_HOVER_SETTINGS or SIZE_HOVER
    local activeSize = isSettings and SIZE_ACTIVE_SETTINGS or SIZE_ACTIVE
    local activeHoverSize = isSettings and SIZE_ACTIVE_HOVER_SETTINGS or SIZE_ACTIVE_HOVER

    local btn = Instance.new("TextButton")
    btn.Name = info.Name .. "Btn"
    btn.Parent = TabsContainer
    btn.Size = normalSize
    btn.LayoutOrder = index
    btn.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    btn.BackgroundTransparency = 0.2
    btn.AutoButtonColor = false
    btn.Text = ""
    addCorner(btn, 6)
    addGradient(btn, Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15), 90)

    local icon = Instance.new("ImageLabel")
    icon.Parent = btn
    icon.BackgroundTransparency = 1
    icon.Image = info.Icon
    icon.Size = UDim2.new(0, 15, 0, 15)
    icon.Position = UDim2.new(0, 8, 0.5, -7.5)

    local label = Instance.new("TextLabel")
    label.Parent = btn
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, -30, 1, 0)
    label.Position = UDim2.new(0, 28, 0, 0)
    label.Font = Enum.Font.GothamMedium
    label.TextSize = 12
    label.TextColor3 = Color3.fromRGB(230, 230, 230)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Text = info.Name

    local tooltip = Instance.new("TextLabel")
    tooltip.Name = "Tooltip"
    tooltip.Parent = ScreenGui
    tooltip.Size = UDim2.new(0, 150, 0, 30)
    tooltip.Position = UDim2.new(0, 0, 0, 0)
    tooltip.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    tooltip.BackgroundTransparency = 0.1
    tooltip.Text = info.Name .. " - " .. (info.Name == "Settings" and "Customize UI" or "Manage " .. info.Name)
    tooltip.Font = Enum.Font.Gotham
    tooltip.TextSize = 11
    tooltip.TextColor3 = Color3.fromRGB(230, 230, 230)
    tooltip.TextWrapped = true
    addCorner(tooltip, 4)
    addStroke(tooltip, Color3.fromRGB(80, 80, 80), 1)
    tooltip.Visible = false

    safeConnect(btn.MouseEnter, function()
        local target = (activeTab == btn) and activeHoverSize or hoverSize
        TweenService:Create(btn, TweenInfo.new(0.12, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = target}):Play()
        local mousePos = UserInputService:GetMouseLocation()
        tooltip.Position = UDim2.new(0, mousePos.X + 10, 0, mousePos.Y - 40)
        tooltip.Visible = true
    end)

    safeConnect(btn.MouseLeave, function()
        local target = (activeTab == btn) and activeSize or normalSize
        TweenService:Create(btn, TweenInfo.new(0.12, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = target}):Play()
        tooltip.Visible = false
    end)

    safeConnect(btn.MouseButton1Click, function()
        if debounceCheck("tabClick", 0.2) then return end
        local centerPos = UDim2.new(0, btn.AbsolutePosition.X + btn.AbsoluteSize.X / 2, 0, btn.AbsolutePosition.Y + btn.AbsoluteSize.Y / 2)
        createBurst(centerPos, 10)

        if activeTab == btn then
            TweenService:Create(btn, TweenInfo.new(0.18, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = normalSize}):Play()
            activeTab = nil
            for _, p in pairs(Panels) do
                if p.Visible then
                    TweenService:Create(p, TweenInfo.new(0.22, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                    task.delay(0.22, function()
                        if p and p.Parent then p.Visible = false end
                    end)
                end
            end
            clearSidePanel()
            showNotification("UI", "All panels closed", 2, "info")
            return
        end

        if activeTab then
            TweenService:Create(activeTab, TweenInfo.new(0.18, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = normalSize}):Play()
        end

        for _, p in pairs(Panels) do
            if p.Visible then
                TweenService:Create(p, TweenInfo.new(0.18, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                task.delay(0.18, function() if p and p.Parent then p.Visible = false end end)
            end
        end

        local target = Panels[info.Name]
        if target and target.Parent then
            target.Visible = true
            target.BackgroundTransparency = 1
            TweenService:Create(target, TweenInfo.new(0.22, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 0.05}):Play()
            TweenService:Create(btn, TweenInfo.new(0.18, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = activeSize}):Play()
            activeTab = btn

            local tabTheme = info.Name == "Aimbot" and "Fire" or
                            info.Name == "Visuals" and "Starfield" or
                            info.Name == "Misc" and "NeonGlow" or
                            info.Name == "Other" and "Snow" or
                            "Default"
            switchTheme(tabTheme)

            -- Update SidePanel based on tab
            clearSidePanel()
            if info.Name == "Visuals" then
                local newViewport = Instance.new("ViewportFrame")
                newViewport.Name = "PreviewViewport"
                newViewport.Parent = SideContent
                newViewport.Size = UDim2.new(1, -10, 0, 200)
                newViewport.Position = UDim2.new(0, 5, 0, 5)
                newViewport.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                newViewport.BackgroundTransparency = 0.2
                addCorner(newViewport, 6)
                addStroke(newViewport, Color3.fromRGB(80, 80, 80), 1)

                local newWorldModel = Instance.new("WorldModel")
                newWorldModel.Parent = newViewport
                local newPreviewPart = previewPart:Clone()
                newPreviewPart.Parent = newWorldModel

                local newCamera = Instance.new("Camera")
                newCamera.Parent = newViewport
                newViewport.CurrentCamera = newCamera
                newCamera.CFrame = CFrame.new(Vector3.new(0, 0, 10), Vector3.new(0, 0, 0))

                SideContent.CanvasSize = UDim2.new(0, 0, 0, 210)
                SideHeaderLabel.Text = "3D Preview"
            end

            showNotification("Tab", "Opened " .. info.Name .. " panel", 2, "success")
        end
    end)

    return btn
end

local function addPlayerInfo()
    local avatarSize = 22
    local infoFrame = Instance.new("Frame")
    infoFrame.Name = "PlayerInfo"
    infoFrame.Parent = NavBar
    infoFrame.BackgroundTransparency = 1
    infoFrame.Size = UDim2.new(0, avatarSize + 80, 0, 32)
    infoFrame.Position = UDim2.new(1, -100, 0.5, -16)

    local avatar = Instance.new("ImageLabel")
    avatar.Name = "PlayerAvatar"
    avatar.Parent = infoFrame
    avatar.Size = UDim2.new(0, avatarSize, 0, avatarSize)
    avatar.Position = UDim2.new(0, 4, 0.5, -avatarSize/2)
    avatar.BackgroundTransparency = 1
    avatar.ScaleType = Enum.ScaleType.Fit
    avatar.ClipsDescendants = true
    addCorner(avatar, 5)

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "PlayerName"
    nameLabel.Parent = infoFrame
    nameLabel.BackgroundTransparency = 1
    nameLabel.Size = UDim2.new(0, 60, 0, avatarSize)
    nameLabel.Position = UDim2.new(0, avatarSize + 8, 0.5, -avatarSize/2)
    nameLabel.Font = Enum.Font.GothamMedium
    nameLabel.TextSize = 12
    nameLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.TextTruncate = Enum.TextTruncate.AtEnd

    local function updatePlayerInfo()
        nameLabel.Text = Player.Name
        avatar.Image = "rbxthumb://type=AvatarHeadShot&id=" .. Player.UserId .. "&w=48&h=48"
        local textWidth = math.clamp(nameLabel.TextBounds.X, 40, 60)
        nameLabel.Size = UDim2.new(0, textWidth, 0, avatarSize)
    end

    updatePlayerInfo()
    Player:GetPropertyChangedSignal("Name"):Connect(updatePlayerInfo)
    task.spawn(function()
        while wait(10) do
            if infoFrame and infoFrame.Parent then updatePlayerInfo() end
        end
    end)
end

for i, info in ipairs(navButtons) do
    createNavButton(info, i)
end
addPlayerInfo()

-- TAB / INSERT Toggles
local guiVisible = true
local panelsVisible = true

setBlur(true)

safeConnect(UserInputService.InputBegan, function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.Tab then
        if debounceCheck("tabToggle", 0.3) then return end
        guiVisible = not guiVisible
        local targetPos = guiVisible and UDim2.new(0, 0, 0, 0) or UDim2.new(0, 0, 1, 0)
        TweenService:Create(MainContainer, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Position = targetPos}):Play()
        if not guiVisible then
            clearParticles()
            setBlur(false)
        else
            setBlur(true)
            for _ = 1, 30 do createParticle() end
            startParticleLoop()
        end
        showNotification("UI", guiVisible and "UI shown" or "UI hidden", 2, "info")
    end
    if input.KeyCode == Enum.KeyCode.Insert then
        if debounceCheck("insertToggle", 0.3) then return end
        panelsVisible = not panelsVisible
        if panelsVisible then
            NavBar.Visible = true
            PanelsContainer.Visible = true
            TweenService:Create(NavBar, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 0.1}):Play()
            for _, p in pairs(Panels) do
                if p.Visible then
                    p.BackgroundTransparency = 1
                    TweenService:Create(p, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 0.05}):Play()
                end
            end
            SidePanel.BackgroundTransparency = 1
            TweenService:Create(SidePanel, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 0.05}):Play()
            setBlur(true)
            startParticleLoop()
            if activeTab and activeTab.Name == "VisualsBtn" then
                clearSidePanel()
                local newViewport = Instance.new("ViewportFrame")
                newViewport.Name = "PreviewViewport"
                newViewport.Parent = SideContent
                newViewport.Size = UDim2.new(1, -10, 0, 200)
                newViewport.Position = UDim2.new(0, 5, 0, 5)
                newViewport.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                newViewport.BackgroundTransparency = 0.2
                addCorner(newViewport, 6)
                addStroke(newViewport, Color3.fromRGB(80, 80, 80), 1)

                local newWorldModel = Instance.new("WorldModel")
                newWorldModel.Parent = newViewport
                local newPreviewPart = previewPart:Clone()
                newPreviewPart.Parent = newWorldModel

                local newCamera = Instance.new("Camera")
                newCamera.Parent = newViewport
                newViewport.CurrentCamera = newCamera
                newCamera.CFrame = CFrame.new(Vector3.new(0, 0, 10), Vector3.new(0, 0, 0))

                SideContent.CanvasSize = UDim2.new(0, 0, 0, 210)
                SideHeaderLabel.Text = "3D Preview"
            end
            showNotification("Panels", "Panels shown", 2, "success")
        else
            TweenService:Create(NavBar, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
            for _, p in pairs(Panels) do
                if p.Visible then
                    TweenService:Create(p, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                end
            end
            TweenService:Create(SidePanel, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
            task.delay(0.26, function()
                if not panelsVisible then
                    NavBar.Visible = false
                    PanelsContainer.Visible = false
                    clearParticles()
                    setBlur(false)
                    clearSidePanel()
                    showNotification("Panels", "Panels hidden", 2, "info")
                end
            end)
        end
    end
end)

safeConnect(Player.CharacterAdded, function()
    setBlur(false)
end)

safeConnect(Player.AncestryChanged, function()
    if not Player.Parent then cleanup() end
end)

local dragging, dragInput, startMousePos, startFramePos = false, nil, nil, nil

local function updatePosition()
    if not dragging or not startMousePos or not startFramePos then return end
    local mousePos = UserInputService:GetMouseLocation()
    local delta = Vector2.new(mousePos.X - startMousePos.X, mousePos.Y - startMousePos.Y)
    PanelsContainer.Position = UDim2.new(0, startFramePos.X.Offset + delta.X, 0, startFramePos.Y.Offset + delta.Y)
end

for _, panel in pairs(Panels) do
    local header = panel:FindFirstChild("Header")
    if header then
        safeConnect(header.InputBegan, function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                startMousePos = UserInputService:GetMouseLocation()
                startFramePos = UDim2.new(0, PanelsContainer.AbsolutePosition.X, 0, PanelsContainer.AbsolutePosition.Y)
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                        showNotification("UI", "Panel position updated", 1.5, "success")
                    end
                end)
            end
        end)

        safeConnect(header.InputChanged, function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
        end)
    end
end

safeConnect(UserInputService.InputChanged, function(input)
    if dragging and input == dragInput then updatePosition() end
end)
